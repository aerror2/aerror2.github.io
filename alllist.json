{
    "code": 200,
    "message": "success",
    "traceId": "0fdb6d09-c8ef-49b1-b794-ea243e9f2de9",
    "data": {
        "list": [
            {
                "type": "blog",
                "formatTime": "2025.02.13",
                "title": "搭建一个本地DeepSeek r1 14B配置低到惊喜！附超简单步骤",
                "description": "发现只需要11G显存！只使用一张rtx3060 12G的就搞定了。速度和答案质量还不错，太令人惊喜了！7B只需要5GB的显存。",
                "hasOriginal": true,
                "diggCount": 1,
                "commentCount": 0,
                "postTime": 1739418028000,
                "createTime": 1739417428000,
                "updateTime": 1739451826000,
                "url": "https://blog.csdn.net/aerror/article/details/145608401",
                "articleType": 1,
                "viewCount": 361,
                "picList": [
                    "https://i-blog.csdnimg.cn/blog_migrate/tags/6c820fa0b7902309f0622e7fd3a773c8.png"
                ],
                "editUrl": "https://mp.csdn.net/console/editor/html/145608401",
                "collectCount": 0,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2025.02.06",
                "title": "c语言使用通配符取一个目录下符合规则的所有文件的最简单办法",
                "description": "其实很多种办法，可以使用dir相关的函数把文件都枚举出来，然后使用正则表达式，这个是我之前的做法。如此简单，没有想到吧？",
                "hasOriginal": true,
                "diggCount": 1,
                "commentCount": 0,
                "postTime": 1738809154000,
                "createTime": 1738808785000,
                "updateTime": 1738855503000,
                "url": "https://blog.csdn.net/aerror/article/details/145468061",
                "articleType": 1,
                "viewCount": 144,
                "picList": [
                    "https://i-blog.csdnimg.cn/blog_migrate/tags/e8ea92f580f30873eef61616bc0e4bf2.png"
                ],
                "editUrl": "https://mp.csdn.net/console/editor/html/145468061",
                "collectCount": 0,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2025.02.06",
                "title": "使用deepseek写一个单击，双击和长按的检测函数",
                "description": "DeepSeek好火，注册试用一下：提问：请使用c语言写一个函数，输入参数是是为： A为当前的输入量，1000-2000，根据它的变化， B为当前这个输入量的状态数据结构， 函数检查这个A，判断它的变化，从而判断用户是单击还双击，还是长按。具体当A变化量大于300时认为是开始了有效的点击，这时认为是按下按钮，记录变化前的值为C ，当A变回和C差值只有50左右时，认为释放按钮。已深度思考（用时 272 秒）",
                "hasOriginal": true,
                "diggCount": 12,
                "commentCount": 0,
                "postTime": 1738646246000,
                "createTime": 1738645768000,
                "updateTime": 1738809366000,
                "url": "https://blog.csdn.net/aerror/article/details/145439555",
                "articleType": 1,
                "viewCount": 661,
                "picList": [
                    "https://i-blog.csdnimg.cn/blog_migrate/tags/6c820fa0b7902309f0622e7fd3a773c8.png"
                ],
                "editUrl": "https://mp.csdn.net/console/editor/html/145439555",
                "collectCount": 7,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2025.02.03",
                "title": "Macos编译openjdk因berkeley-db版本问题失败解决办法",
                "description": "看来是优先使用/usr/local下的头文件了， 简单处理一下，看起来brew也有多份，直接删除一下/usr/local下的db.h及相关的头文件。原因是berkeley-db最新的版本这个get的定义是多一个DB_TXN的参数，看名字是用于事务处理的。一开始以为是版本低了，upgrade了一下没有解决，后来找了一下xcode目录下,也有一个db.h。同时get这个函数看起来也刚好是只有四个参数，打开看了一下，好像比较老的，然后再编译，顺利通过。",
                "hasOriginal": true,
                "diggCount": 2,
                "commentCount": 0,
                "postTime": 1738552560000,
                "createTime": 1738551857000,
                "updateTime": 1738552560000,
                "url": "https://blog.csdn.net/aerror/article/details/145428356",
                "articleType": 1,
                "viewCount": 647,
                "picList": [
                    "https://i-blog.csdnimg.cn/blog_migrate/tags/6c1354b6aa25593ad25c55191fc96eeb.png"
                ],
                "editUrl": "https://mp.csdn.net/console/editor/html/145428356",
                "collectCount": 5,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2025.01.24",
                "title": "snappy简单测试",
                "description": "snappy是一个比较快的压缩算法，没有cli， 需要自己写一个。",
                "hasOriginal": true,
                "diggCount": 2,
                "commentCount": 0,
                "postTime": 1737689446000,
                "createTime": 1737689446000,
                "updateTime": 1737693392000,
                "url": "https://blog.csdn.net/aerror/article/details/145338809",
                "articleType": 1,
                "viewCount": 168,
                "picList": [
                    "https://i-blog.csdnimg.cn/blog_migrate/tags/e658252d918e15d0df73656bca64a96f.png"
                ],
                "editUrl": "https://mp.csdn.net/console/editor/html/145338809",
                "collectCount": 0,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2025.01.23",
                "title": "网络通讯协议定义语言及代理代码生成器",
                "description": "<!-- /* Font Definitions */ @font-face\t{font-family:宋体;\tpanose-1:2 1 6 0 3 1 1 1 1 1;\tmso-font-alt:SimSun;\tmso-font-charset:134;\tmso-generic-font-family:auto;\tmso-font-pitch:variable;",
                "hasOriginal": true,
                "diggCount": 0,
                "commentCount": 0,
                "postTime": 1250908500000,
                "createTime": 1250908500000,
                "updateTime": 1737633722000,
                "url": "https://blog.csdn.net/aerror/article/details/4472057",
                "articleType": 1,
                "viewCount": 10868,
                "picList": [
                    "https://i-blog.csdnimg.cn/blog_migrate/tags/b15c6791119fa1bec4afe2397d081db0.png"
                ],
                "editUrl": "https://mp.csdn.net/console/editor/html/4472057",
                "collectCount": 2,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2025.01.23",
                "title": "cannot locate symbol “_ZTTNSt6__ndk114basic_ofstreamIcNS_11char_traitsIcEEEE“ 的解决办法",
                "description": "使用clang++编译出来的android程序，实际真机运行出现 cannot locate symbol \"_ZTTNSt6__ndk114basic_ofstreamIcNS_11char_traitsIcEEEE\" referenced by。重新上传，运行ok.",
                "hasOriginal": true,
                "diggCount": 3,
                "commentCount": 0,
                "postTime": 1737615995000,
                "createTime": 1737615870000,
                "updateTime": 1737616102000,
                "url": "https://blog.csdn.net/aerror/article/details/145323851",
                "articleType": 1,
                "viewCount": 356,
                "picList": [
                    "https://i-blog.csdnimg.cn/blog_migrate/tags/671f42ab07fd990f949a1c903140dd83.png"
                ],
                "editUrl": "https://mp.csdn.net/console/editor/html/145323851",
                "collectCount": 0,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2025.01.23",
                "title": "Macos交叉编译android的cmix压缩算法",
                "description": "LFLAGS和CC改一下，注释的是原来的内容。然后执行make就可以了。",
                "hasOriginal": true,
                "diggCount": 1,
                "commentCount": 0,
                "postTime": 1737609021000,
                "createTime": 1737608839000,
                "updateTime": 1737609022000,
                "url": "https://blog.csdn.net/aerror/article/details/145321646",
                "articleType": 1,
                "viewCount": 770,
                "picList": [
                    "https://i-blog.csdnimg.cn/blog_migrate/tags/b15c6791119fa1bec4afe2397d081db0.png"
                ],
                "editUrl": "https://mp.csdn.net/console/editor/html/145321646",
                "collectCount": 0,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2025.01.23",
                "title": "Macos下交叉编译安卓的paq8px压缩算法 ",
                "description": "修改paq8px/CMakeLists.txt, 如下，去掉clang++不支持的-march=nocona和-floop-strip-mine。稍旧的ndk并不能编译成功，需要下载最新的ndkr27c, 最后是使用clang来编译。官方没有android的编译方法，自己编写脚本在macos下交叉编译.编译build.sh。",
                "hasOriginal": true,
                "diggCount": 3,
                "commentCount": 0,
                "postTime": 1737600961000,
                "createTime": 1737600713000,
                "updateTime": 1737601868000,
                "url": "https://blog.csdn.net/aerror/article/details/145319677",
                "articleType": 1,
                "viewCount": 716,
                "picList": [
                    "https://i-blog.csdnimg.cn/blog_migrate/tags/b15c6791119fa1bec4afe2397d081db0.png"
                ],
                "editUrl": "https://mp.csdn.net/console/editor/html/145319677",
                "collectCount": 0,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2025.01.23",
                "title": "从根源分析，调试，定位和解决MacOS ld: unsupported tapi file type ‘!tapi-tbd‘ in YAML file",
                "description": "发现是最后一个spam是调用/usr/local/Cellar/gcc/14.2.0_1/bin/../libexec/gcc/x86_64-apple-darwin20/14/collect2。这个anaconda的ld和系统的是不匹配的，但是它为了penv把这个替换了，结果collect2使用了它设置的工具链的ld. 然后引起这个问题。本文希望可以帮到需要的人，还是不人遇到这个的，可能原因不大一样，但是这个文章把debug和定位的方法和原理都告诉大家了，祝大好运！看起来好了，再试试编译。",
                "hasOriginal": true,
                "diggCount": 2,
                "commentCount": 4,
                "postTime": 1737533367000,
                "createTime": 1737529637000,
                "updateTime": 1737601099000,
                "url": "https://blog.csdn.net/aerror/article/details/145304045",
                "articleType": 1,
                "viewCount": 711,
                "picList": [
                    "https://i-blog.csdnimg.cn/blog_migrate/tags/6c820fa0b7902309f0622e7fd3a773c8.png"
                ],
                "editUrl": "https://mp.csdn.net/console/editor/html/145304045",
                "collectCount": 1,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2025.01.22",
                "title": "强制让cmake使用指定编译器如某个版本的gcc 和g++",
                "description": "可以定义CC和CXX ,不过还是使用cmake本身的宏定义比较好。",
                "hasOriginal": true,
                "diggCount": 3,
                "commentCount": 0,
                "postTime": 1737442446000,
                "createTime": 1737442446000,
                "updateTime": 1737511449000,
                "url": "https://blog.csdn.net/aerror/article/details/145283786",
                "articleType": 1,
                "viewCount": 250,
                "picList": [
                    "https://i-blog.csdnimg.cn/blog_migrate/tags/6c820fa0b7902309f0622e7fd3a773c8.png"
                ],
                "editUrl": "https://mp.csdn.net/console/editor/html/145283786",
                "collectCount": 0,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2025.01.18",
                "title": "STM32G031G6和STM32F031G6是两个型号，别弄错了啊！",
                "description": "没有道理啊，查文档，对针针脚，查了STM32F031G6的。决定焊第二张，就留ｍｃｕ最简线路，又是一样，没有反应。９．难道ｍｃｕ坏的，焊第三张样板，就留ｍｃｕ最简线路，又是一样，没有反应。买的是STM32G031G6，画图画的是STM32F031G6。１．EDA选了STM32F031G6，画图，４层板，画得我眼都花了，14.我又看了一眼电路原理图，看了一下mcu上的丝标，呃。７．发现没有反应，以来没有焊好，补焊一轮，检查连通性，无果。４．终于等到，开工贴双面，眼又花了，花了数个小时。11.好吧，睡觉。",
                "hasOriginal": true,
                "diggCount": 2,
                "commentCount": 0,
                "postTime": 1737175675000,
                "createTime": 1737174779000,
                "updateTime": 1737177705000,
                "url": "https://blog.csdn.net/aerror/article/details/145225440",
                "articleType": 1,
                "viewCount": 251,
                "picList": [
                    "https://i-blog.csdnimg.cn/blog_migrate/tags/71e05144a4f62a37d7dd57a628cb1961.png"
                ],
                "editUrl": "https://mp.csdn.net/console/editor/html/145225440",
                "collectCount": 0,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2025.01.14",
                "title": "IL2CPPDumper符号导入IDA的set_name错误解决",
                "description": "结果，原来是我使用ida使用ida_py3.py是不行了，然后ida.py就好了。看来是python的版本问题。python 版本确实乱。乱到要出一个pyenv管理, anaconda, 很是奇怪的语言。把il2cpp的生成的符号信息导入ida中会有出现以下错误；调了半天，还改了ida_name.py，以为是可变参数问题。这个直接单独执行没有问题。",
                "hasOriginal": true,
                "diggCount": 1,
                "commentCount": 0,
                "postTime": 1736838471000,
                "createTime": 1736739406000,
                "updateTime": 1736839013000,
                "url": "https://blog.csdn.net/aerror/article/details/145111741",
                "articleType": 1,
                "viewCount": 380,
                "picList": [
                    "https://i-blog.csdnimg.cn/blog_migrate/tags/bbaff8dbfaf95ad97389389d60465603.png"
                ],
                "editUrl": "https://mp.csdn.net/console/editor/html/145111741",
                "collectCount": 1,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2025.01.14",
                "title": "Frida调试il2cpp的程序打印原生c#对象为json",
                "description": "需要配合il2cpp原来程序里的一些json序列化的工具来进行，一般都可以找到，如下面的。MiniJSON.Json，像这个 Serialize到运行时对象就不行了。主要的思路是，输入一个对象，那么使用反射的GetType,  然后使用type的GetFields， 拿到Field的列表，然后遍历field列表。Field是一个抽象类的，这里我使用 RuntimeFieldInfo : RtFieldInfo里面的函数来实现。",
                "hasOriginal": true,
                "diggCount": 2,
                "commentCount": 0,
                "postTime": 1736838115000,
                "createTime": 1736837924000,
                "updateTime": 1736838540000,
                "url": "https://blog.csdn.net/aerror/article/details/145139535",
                "articleType": 1,
                "viewCount": 423,
                "picList": [
                    "https://i-blog.csdnimg.cn/blog_migrate/tags/db3787141d668b1b21ce6510b847fa3b.png"
                ],
                "editUrl": "https://mp.csdn.net/console/editor/html/145139535",
                "collectCount": 1,
                "rtype": "article"
            },
            {
                "type": "video",
                "formatTime": "2025.01.13",
                "title": "Flashing firmware ELRS WIFI",
                "description": "Flashing firmware ELRS WIFI",
                "cover": "https://v-blog.csdnimg.cn/asset/ac4534c20ce910b1fa9aed887a19e0aa/cover/Cover0.jpg",
                "createTime": 1736756344165,
                "url": "https://live.csdn.net/v/443145",
                "rtype": "blog"
            },
            {
                "type": "blog",
                "formatTime": "2025.01.12",
                "title": "使用命令行打开CygWin/mintty登录环境变量，并转到对应路径",
                "description": "对于使用sublime text，我在当前编辑所在的文件的路径下打开一个cygwin的命行令窗口，进行命令行操作，这样就很方便了，直接打开，不用再自己cd到当前目录。上一篇使用oldpwd来转目录，也可解决问题，但是其实mintty有一个隐藏的--dir的参数，启动的时候指定即可，发文记录一下。这个打一个cygwin的窗口，登录/bin/sh ，初始化环境变量后，会cd的%cd%这个当前目录。",
                "hasOriginal": true,
                "diggCount": 3,
                "commentCount": 0,
                "postTime": 1736670100000,
                "createTime": 1736669927000,
                "updateTime": 1736670100000,
                "url": "https://blog.csdn.net/aerror/article/details/145094367",
                "articleType": 1,
                "viewCount": 257,
                "picList": [
                    "https://i-blog.csdnimg.cn/blog_migrate/tags/6c820fa0b7902309f0622e7fd3a773c8.png"
                ],
                "editUrl": "https://mp.csdn.net/console/editor/html/145094367",
                "collectCount": 0,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2025.01.02",
                "title": "分享一个C语言写的自动递归创建多层级目录的mkdir",
                "description": "效果就是和mkdir -p 一样了。使用标准的c语言库，可以跨平台使用。",
                "hasOriginal": true,
                "diggCount": 2,
                "commentCount": 0,
                "postTime": 1735794702000,
                "createTime": 1735794677000,
                "updateTime": 1735794736000,
                "url": "https://blog.csdn.net/aerror/article/details/144884121",
                "articleType": 1,
                "viewCount": 180,
                "picList": [
                    "https://i-blog.csdnimg.cn/blog_migrate/tags/e8ea92f580f30873eef61616bc0e4bf2.png"
                ],
                "editUrl": "https://mp.csdn.net/console/editor/html/144884121",
                "collectCount": 0,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2025.01.01",
                "title": "如何使用Sublime Text3和Keil uVision ５协同进行单片机开发",
                "description": "本来一向使用SDCC,后来发现同一套代码工程Keil编译出来的代码小20%左右。但是Keil的IDE和编辑器相当难用，看着极不顺眼。后来发现VScode可以调用Keil来编译。我研究一下了，发现也是可行的。3. 需要安装cywin,然后在sublime上使用我上编文章的cywinmake的buildsystem。4. ctrl+b就可以使用keil来编译了。",
                "hasOriginal": true,
                "diggCount": 3,
                "commentCount": 0,
                "postTime": 1735707672000,
                "createTime": 1735707280000,
                "updateTime": 1735708246000,
                "url": "https://blog.csdn.net/aerror/article/details/144866072",
                "articleType": 1,
                "viewCount": 289,
                "picList": [
                    "https://i-blog.csdnimg.cn/blog_migrate/tags/28442baf755a43a06d31c3a2cc43a265.png"
                ],
                "editUrl": "https://mp.csdn.net/console/editor/html/144866072",
                "collectCount": 0,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2025.01.01",
                "title": "windows 下如何在sublime Text调用cywin终端，然后执行make进行编译代码",
                "description": "找到cywin的安装目录找到mintty.exe, sublime的菜单Tools新一个buildSysteｍ，回到工作目录，选择这个cywinmake为buildsystem,如上图。填写以上内容，然后保存为cywinmake.sublime-build。sublime会帮你新建个文件叫 ＊ｓｕｂｌｉｍｅ－ｂｕｉｌｄ。ctrl+B就可以编译了。",
                "hasOriginal": true,
                "diggCount": 2,
                "commentCount": 0,
                "postTime": 1735706599000,
                "createTime": 1735706205000,
                "updateTime": 1735706901000,
                "url": "https://blog.csdn.net/aerror/article/details/144865802",
                "articleType": 1,
                "viewCount": 204,
                "picList": [
                    "https://i-blog.csdnimg.cn/direct/7a7d059196964bf18691913a46d63388.png"
                ],
                "editUrl": "https://mp.csdn.net/console/editor/html/144865802",
                "collectCount": 0,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2024.12.31",
                "title": "要快速找到 A, B, C 使得 A×B×Cx4/13 最接近 D",
                "description": "A取值范围 为(64, 128, 256,1024),B为（1-255），C为（1-256）D的取值范围是[0,66846720]",
                "hasOriginal": true,
                "diggCount": 6,
                "commentCount": 0,
                "postTime": 1735543882000,
                "createTime": 1735542889000,
                "updateTime": 1735620679000,
                "url": "https://blog.csdn.net/aerror/article/details/144826960",
                "articleType": 1,
                "viewCount": 398,
                "picList": [
                    "https://i-blog.csdnimg.cn/blog_migrate/tags/671f42ab07fd990f949a1c903140dd83.png"
                ],
                "editUrl": "https://mp.csdn.net/console/editor/html/144826960",
                "collectCount": 5,
                "rtype": "article"
            }
        ],
        "total": null
    }
}



{
    "code": 200,
    "message": "success",
    "traceId": "cf124006-2e0c-4336-a21c-9ed668b9fbcb",
    "data": {
        "list": [
            {
                "type": "blog",
                "formatTime": "2024.12.29",
                "title": "计算intel hex文件占用空间大小",
                "description": "只是需要使用sdcc的make的时候，最后打印一下hex文件占用flash的大小和百分比，试了srec_info ， python 的intelhex等，好像都不是需要的。没有办法，只好自己使用shell脚本写一个。保存为showsize.sh,使用例子如下。",
                "hasOriginal": true,
                "diggCount": 1,
                "commentCount": 0,
                "postTime": 1735461192000,
                "createTime": 1735461160000,
                "updateTime": 1735461193000,
                "url": "https://blog.csdn.net/aerror/article/details/144806630",
                "articleType": 1,
                "viewCount": 145,
                "picList": [
                    "https://i-blog.csdnimg.cn/blog_migrate/tags/db3787141d668b1b21ce6510b847fa3b.png"
                ],
                "editUrl": "https://mp.csdn.net/console/editor/html/144806630",
                "collectCount": 0,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2024.12.26",
                "title": "使用命令行来刷写ELRS接收器的固件",
                "description": "使用ExpressLRS Configurator的自带编译好的python命令。",
                "hasOriginal": true,
                "diggCount": 2,
                "commentCount": 0,
                "postTime": 1732896274000,
                "createTime": 1732896252000,
                "updateTime": 1735226733000,
                "url": "https://blog.csdn.net/aerror/article/details/144148289",
                "articleType": 1,
                "viewCount": 527,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/144148289",
                "collectCount": 1,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2024.12.26",
                "title": "Frida转指针类型强转成float",
                "description": "2.使用内存读写来转，速度应该感觉快些。",
                "hasOriginal": true,
                "diggCount": 2,
                "commentCount": 2,
                "postTime": 1735199324000,
                "createTime": 1735199139000,
                "updateTime": 1735199686000,
                "url": "https://blog.csdn.net/aerror/article/details/144746402",
                "articleType": 1,
                "viewCount": 201,
                "picList": [
                    "https://i-blog.csdnimg.cn/direct/044b1d7840364d038b048e658ff0845c.png"
                ],
                "editUrl": "https://mp.csdn.net/console/editor/html/144746402",
                "collectCount": 0,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2024.12.23",
                "title": "arm64 取一个32位数除以10的余数计算",
                "description": "【代码】arm64 取一个32位数除以10的余数计算。",
                "hasOriginal": true,
                "diggCount": 2,
                "commentCount": 0,
                "postTime": 1734933269000,
                "createTime": 1734933214000,
                "updateTime": 1734933317000,
                "url": "https://blog.csdn.net/aerror/article/details/144664395",
                "articleType": 1,
                "viewCount": 146,
                "picList": [
                    "https://i-blog.csdnimg.cn/blog_migrate/tags/8a4bfa4a5d53ce03efff2abd920b6ca4.png"
                ],
                "editUrl": "https://mp.csdn.net/console/editor/html/144664395",
                "collectCount": 0,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2024.12.23",
                "title": "VC2008/2005工程自动生成器",
                "description": "我很喜欢使用VS2008的IDE环境,但是很多源代码都没有可以用于Visual studio IDE的工程文件,例如DDK的示例代码.于是我写了下面的工具,功能如下:1.扫描指定目录并递归其子目录的所有文件,生成一个xml的VCMakeTool类型的工程文件.使用方法：usage:  buildvcprojdirdestfilename",
                "hasOriginal": true,
                "diggCount": 0,
                "commentCount": 1,
                "postTime": 1226327580000,
                "createTime": 1226327580000,
                "updateTime": 1734918934000,
                "url": "https://blog.csdn.net/aerror/article/details/3269685",
                "articleType": 1,
                "viewCount": 8897,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/3269685",
                "collectCount": 0,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2024.12.11",
                "title": "Frida如何获取Vector3(3个float)结构体的返回值",
                "description": "经过我多次尝试和想像，我发现是这可以这样获取的，就是使用replace, 然后返回值定义成一个结构体的数组。在frida的文档里，没有任何描述如何获取这样的返回值。这个也是没有人可以回答。",
                "hasOriginal": true,
                "diggCount": 1,
                "commentCount": 0,
                "postTime": 1727071177000,
                "createTime": 1727070765000,
                "updateTime": 1733898452000,
                "url": "https://blog.csdn.net/aerror/article/details/142456376",
                "articleType": 1,
                "viewCount": 288,
                "picList": [
                    "https://i-blog.csdnimg.cn/direct/44d6a5ed3edc4c9e90af73617cfffc33.png"
                ],
                "editUrl": "https://mp.csdn.net/console/editor/html/142456376",
                "collectCount": 0,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2024.12.09",
                "title": "推荐一个好用的lua反编译工具",
                "description": "https://github.com/Aussiemon/ljd/",
                "hasOriginal": true,
                "diggCount": 2,
                "commentCount": 0,
                "postTime": 1733389713000,
                "createTime": 1733389713000,
                "updateTime": 1733715190000,
                "url": "https://blog.csdn.net/aerror/article/details/144271470",
                "articleType": 1,
                "viewCount": 319,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/144271470",
                "collectCount": 0,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2024.11.26",
                "title": "编译lz4-java",
                "description": "这个项目上一个版本是2021年了，好久没有人维护了，我们需要升级一个lz4的到1.10.0, 以提升性能速度.1.下载ant1.10.15 ， 解压后，设path的bin下面，java安装1.8以上。3. 更新lz4的子模块。",
                "hasOriginal": true,
                "diggCount": 2,
                "commentCount": 0,
                "postTime": 1732605480000,
                "createTime": 1732603703000,
                "updateTime": 1732605480000,
                "url": "https://blog.csdn.net/aerror/article/details/144058969",
                "articleType": 1,
                "viewCount": 312,
                "picList": [
                    "https://i-blog.csdnimg.cn/blog_migrate/cover/db3787141d668b1b21ce6510b847fa3b.png"
                ],
                "editUrl": "https://mp.csdn.net/console/editor/html/144058969",
                "collectCount": 0,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2024.11.16",
                "title": "如何使用gdb动态调试pyhon程序",
                "description": "但凡安装了python，安装目录下都有一个, 不知道在什么地方可以find一下，然后source一下，或者加下.gdbinit里面。然后就可以使用py开头的命令了，如py-bt。然后gdb -p pid。",
                "hasOriginal": true,
                "diggCount": 2,
                "commentCount": 0,
                "postTime": 1731661733000,
                "createTime": 1731661630000,
                "updateTime": 1731720896000,
                "url": "https://blog.csdn.net/aerror/article/details/143803487",
                "articleType": 1,
                "viewCount": 272,
                "picList": [
                    "https://i-blog.csdnimg.cn/blog_migrate/cover/451bd3cb0200ebe9bda02f699c8b39d1.png"
                ],
                "editUrl": "https://mp.csdn.net/console/editor/html/143803487",
                "collectCount": 0,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2024.10.31",
                "title": "GDB像xxd一样查看内存数据",
                "description": "希望可以像xxd一样，分两栏，左右是16进制，右边是ascii的字符串，自定义一个命令即可，如下。",
                "hasOriginal": true,
                "diggCount": 3,
                "commentCount": 0,
                "postTime": 1730361708000,
                "createTime": 1730361692000,
                "updateTime": 1730361709000,
                "url": "https://blog.csdn.net/aerror/article/details/143403930",
                "articleType": 1,
                "viewCount": 200,
                "picList": [
                    "https://i-blog.csdnimg.cn/blog_migrate/cover/8a4bfa4a5d53ce03efff2abd920b6ca4.png"
                ],
                "editUrl": "https://mp.csdn.net/console/editor/html/143403930",
                "collectCount": 0,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2024.10.30",
                "title": "MacOS如何读取磁盘原始的扇区内容，恢复误删除的数据",
                "description": "按上面的原理，我们可以使用代码来一个一个扇区的查找我们丢失数据。我丢了一个android的签名keystore, 用遍了网上的工具都没有找到。我自己写了一个搜索扇区程序，尝试去恢复这个文件。这个就是读取 /dev/disk2这个磁盘每100这个sector, bs表示扇区大小是512.先使用diskutil list找到这磁盘的挂载。你需要把这个磁盘umount下来。然后umount它的挂载。",
                "hasOriginal": true,
                "diggCount": 2,
                "commentCount": 0,
                "postTime": 1730270467000,
                "createTime": 1730268109000,
                "updateTime": 1730275284000,
                "url": "https://blog.csdn.net/aerror/article/details/143363500",
                "articleType": 1,
                "viewCount": 571,
                "picList": [
                    "https://i-blog.csdnimg.cn/blog_migrate/cover/e658252d918e15d0df73656bca64a96f.png"
                ],
                "editUrl": "https://mp.csdn.net/console/editor/html/143363500",
                "collectCount": 0,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2024.10.30",
                "title": "如何在windows下编译UEFITOOL",
                "description": "UEFITOOL 编译",
                "hasOriginal": true,
                "diggCount": 0,
                "commentCount": 0,
                "postTime": 1659167564000,
                "createTime": 1659100213000,
                "updateTime": 1730249970000,
                "url": "https://blog.csdn.net/aerror/article/details/126064047",
                "articleType": 1,
                "viewCount": 984,
                "picList": [
                    "https://i-blog.csdnimg.cn/blog_migrate/cover/c3a921c902eccb7cedaa111df630a7a8.png"
                ],
                "editUrl": "https://mp.csdn.net/console/editor/html/126064047",
                "collectCount": 1,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2024.10.22",
                "title": "Arduino 1.8 无法启动，闪屏过后，卡死，不出主界面解决方案",
                "description": "6.折腾了好久，我觉得可能是arduino ide2.x安装一些东西，而arduino 1.8.9也使用了这些东西，导致问题。7. 最后在C:\\Users\\youuser\\appdata\\Local找到两个ariduino开头的文件夹，有一个文件夹很大，先多东西，把他们都删除了，发现问题解决！4.发现安装了arduino ide2.x， 顺便卸载了，然后再重新安装Arduino 1.8.9，也是一直的现象, 无效。突然打不开了，闪屏过后，不出主界面，一直这样，任务栏有图标。",
                "hasOriginal": true,
                "diggCount": 3,
                "commentCount": 0,
                "postTime": 1729341242000,
                "createTime": 1729339929000,
                "updateTime": 1729559145000,
                "url": "https://blog.csdn.net/aerror/article/details/143083474",
                "articleType": 1,
                "viewCount": 617,
                "picList": [
                    "https://i-blog.csdnimg.cn/blog_migrate/cover/28442baf755a43a06d31c3a2cc43a265.png"
                ],
                "editUrl": "https://mp.csdn.net/console/editor/html/143083474",
                "collectCount": 1,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2024.09.10",
                "title": "USB HID 协议实现详解",
                "description": "但是请求的时候，往往比较当前说明的长，这个没有像之前那先尝试再请求，这里代码直接取两者最小返回即可。要是有多个接口（复合型的设备），IDX就是多个报告的下标索引。bmRequest  =  80  -D7 == 方向是设备至主机？wIndex =  00 00 当有多个hid设备，此为下标索引。wValue == 00 01 , 根据表5， 1 为设备描述符。wLenght 09 00    第一次 请求 09 字节，根据report定义，定时或触发性发送数据。收到 9 字节，数据结构如表8，知道长度。",
                "hasOriginal": true,
                "diggCount": 7,
                "commentCount": 0,
                "postTime": 1724598826000,
                "createTime": 1724423413000,
                "updateTime": 1725949624000,
                "url": "https://blog.csdn.net/aerror/article/details/141475999",
                "articleType": 1,
                "viewCount": 1850,
                "picList": [
                    "https://i-blog.csdnimg.cn/direct/6b3e8a3ac1ce4f8393417d0cac3f43c2.png"
                ],
                "editUrl": "https://mp.csdn.net/console/editor/html/141475999",
                "collectCount": 16,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2024.09.05",
                "title": "小米poco x3 pro adbd 以root权限启动提供服务",
                "description": "8. 在mout的目录下的apex/com.android.adbd，找到adbd,复制出来，上传到手机的/data/local, 并加上执行权限。4. fastboot flash recoery   twrp-3.7.1_12-0-vayu.img, 安装magisk, termux。6. 解压aosp_arm64-img-11718355.zip, 把system.img转成ext2,9.下载system_properties_arm64，上传到/data/local,并加上执行权限，",
                "hasOriginal": true,
                "diggCount": 3,
                "commentCount": 0,
                "postTime": 1715307028000,
                "createTime": 1715305822000,
                "updateTime": 1725526883000,
                "url": "https://blog.csdn.net/aerror/article/details/138650931",
                "articleType": 1,
                "viewCount": 11048,
                "picList": [
                    "https://i-blog.csdnimg.cn/blog_migrate/cover/451bd3cb0200ebe9bda02f699c8b39d1.png"
                ],
                "editUrl": "https://mp.csdn.net/console/editor/html/138650931",
                "collectCount": 3,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2024.08.25",
                "title": "STM32F0XX TIM1 CH2 INPUT CAPTURE 输入捕获PPM信号",
                "description": "按文档的例子和其它例子都很少使用timer1的，不知道为什么，但是我想使用它，方便端口重用，我一开始使用tim1 ch3,死活不工作，搞了几天，没有办法换了一个ch2， 结果同样的代码就工作了。不知道为什么，希望看到的高手告知。（使用f103，timer1 的ch3同样的代码也没有问题。分享PPM的代码如下，是捕捉航模的PPM信号。",
                "hasOriginal": true,
                "diggCount": 3,
                "commentCount": 0,
                "postTime": 1723966617000,
                "createTime": 1723966506000,
                "updateTime": 1724598262000,
                "url": "https://blog.csdn.net/aerror/article/details/141300619",
                "articleType": 1,
                "viewCount": 318,
                "picList": [
                    "https://i-blog.csdnimg.cn/blog_migrate/cover/28442baf755a43a06d31c3a2cc43a265.png"
                ],
                "editUrl": "https://mp.csdn.net/console/editor/html/141300619",
                "collectCount": 0,
                "rtype": "article"
            },
            {
                "type": "download",
                "formatTime": "2020.04.28",
                "title": "MachORuntime.pdf",
                "description": "Mach-O 文件格式，用于ios/macos的可执行文件的格式，官方的文档，原来有developer可以下载，现在不行了，顾上传到这，给有需要的人.",
                "fileType": "pdf",
                "createTime": 1588043694000,
                "url": "https://download.csdn.net/download/aerror/12368810",
                "rtype": "file"
            },
            {
                "type": "blog",
                "formatTime": "2024.07.02",
                "title": "当今最流行的推荐引擎算法有哪些？",
                "description": "但事实上，推荐数据集与通常的计算机视觉数据集有很大不同，这使得使用现有的实现和工具变得更加复杂（例如，TensorFlow 或 PyTorch 等库中的许多优化器不支持稀疏更新动量，这是训练推荐深度模型的基石）。要训练解决项目冷启动（或用户冷启动）的模型，您需要一个数据集，其中包括项目（或用户的）的详细描述，例如电影的类型、预算、持续时间或任何可能有助于推荐的变量。由于推荐是使用用户对商品的反馈数据集计算得出的，因此它们无法推荐没有（或只有少量）反馈的商品，例如新商品。让我们看看每种方法的优点和缺点。",
                "hasOriginal": false,
                "diggCount": 0,
                "commentCount": 1,
                "postTime": 1719909500000,
                "createTime": 1719909400000,
                "updateTime": 1719909512000,
                "url": "https://blog.csdn.net/aerror/article/details/140130616",
                "articleType": 4,
                "viewCount": 306,
                "picList": [
                    "https://i-blog.csdnimg.cn/blog_migrate/cover/c245f41073507966b40ac570fe861b54.png"
                ],
                "editUrl": "https://mp.csdn.net/console/editor/html/140130616",
                "collectCount": 1,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2024.06.21",
                "title": "MACOS VMWare Fusion无法将“Ethernet0”连接到虚拟网络“/dev/vmnet8”",
                "description": "以为是vmware的，使用上面的命令把vmnet都停了，发现还在。ifconfig 看了一下，发信息多了一个bridge..到 系统偏好设置->共享->互联网共享 这个关掉。各项服务启动也是正常的，但是就是vm没有网络了。想了半天，原来是在wifi上打开了共享互联网。记录一下，备忘和帮忙遇到同样问题的人。一直好端端的，突然打开vm提示这个。启动vmware的那堆服务器。再打开vm， 发现不提示。查了一下，应该是网络有关。这个bridge不见了。开机vm的网络也正常了。",
                "hasOriginal": true,
                "diggCount": 5,
                "commentCount": 0,
                "postTime": 1718947104000,
                "createTime": 1718946811000,
                "updateTime": 1718947105000,
                "url": "https://blog.csdn.net/aerror/article/details/139858406",
                "articleType": 1,
                "viewCount": 1304,
                "picList": [
                    "https://i-blog.csdnimg.cn/blog_migrate/cover/e658252d918e15d0df73656bca64a96f.png"
                ],
                "editUrl": "https://mp.csdn.net/console/editor/html/139858406",
                "collectCount": 0,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2024.05.30",
                "title": "android root了之后， jdb任何app",
                "description": "设置 ro.debuggable， 那么全部app都是可以debuggable的，不需要修改manifest.",
                "hasOriginal": true,
                "diggCount": 0,
                "commentCount": 0,
                "postTime": 1614940579000,
                "createTime": 1614940579000,
                "updateTime": 1717059294000,
                "url": "https://blog.csdn.net/aerror/article/details/114407774",
                "articleType": 1,
                "viewCount": 403,
                "picList": [
                    "https://i-blog.csdnimg.cn/blog_migrate/cover/b15c6791119fa1bec4afe2397d081db0.png"
                ],
                "editUrl": "https://mp.csdn.net/console/editor/html/114407774",
                "collectCount": 0,
                "rtype": "article"
            }
        ],
        "total": null
    }
}


{
    "code": 200,
    "message": "success",
    "traceId": "4e9435c7-6e34-45b8-94f7-65b8e50adc30",
    "data": {
        "list": [
            {
                "type": "blog",
                "formatTime": "2024.03.22",
                "title": "如何grep excel文件，在excel文件查找到字符串",
                "description": "当我们遇到一堆excel文件，我们想通过关键字去定位一下它在那些excel文件中存在，怎么办？直接grep是肯定不行的。1. 安装 xls2txt或xlsx2csv，把excel转txt再用grep。2. 安装xlsxgrep。",
                "hasOriginal": true,
                "diggCount": 1,
                "commentCount": 0,
                "postTime": 1711076869000,
                "createTime": 1711076815000,
                "updateTime": 1711076899000,
                "url": "https://blog.csdn.net/aerror/article/details/136935072",
                "articleType": 1,
                "viewCount": 459,
                "picList": [
                    "https://i-blog.csdnimg.cn/blog_migrate/cover/a3f44b02e67d2b4f6bea142cd967f1a3.png"
                ],
                "editUrl": "https://mp.csdn.net/console/editor/html/136935072",
                "collectCount": 0,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2024.03.01",
                "title": "开源BLHELI-S 代码详细解读(五）",
                "description": "总体思想是根据电机运行状态计算前4次换相时间，然后根据前4次换相时间计算15度和7.5度电角度时间，换相之后延时7.5度电角度开始检测过零点，检测到过零点后延时15度电角度进行换相。我们继续来看calc_next_comm_timing, 每次操作完换相之后，这里都会调用，同时会设置timer3去等advance timing.",
                "hasOriginal": true,
                "diggCount": 2,
                "commentCount": 4,
                "postTime": 1709270913000,
                "createTime": 1709117567000,
                "updateTime": 1709281442000,
                "url": "https://blog.csdn.net/aerror/article/details/136353455",
                "articleType": 1,
                "viewCount": 612,
                "picList": [
                    "https://i-blog.csdnimg.cn/blog_migrate/cover/28442baf755a43a06d31c3a2cc43a265.png"
                ],
                "editUrl": "https://mp.csdn.net/console/editor/html/136353455",
                "collectCount": 2,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2024.03.01",
                "title": "开源BLHELI-S 代码详细解读(四）",
                "description": "如Set_Pwm_C，   P1SKIP =  37h(00110111b), 即P1.3 P1.6和 P1.7会给外设使用，  根据优先度，PCA0的CEX0会使用P1.3(CpwmFET)输出 CEX1 会在P1.6(CcomFET)输出。这个 wait_before_zc_scan，其实比较简单，就是从把timer3的超时设置为Comm_Period4x_L和Comm_Period4x_H, 只有在STARTUP_PHASE和 SHL INITIAL_RUN_PHASE阶段才会设置。",
                "hasOriginal": true,
                "diggCount": 6,
                "commentCount": 0,
                "postTime": 1708397767000,
                "createTime": 1707221238000,
                "updateTime": 1709270899000,
                "url": "https://blog.csdn.net/aerror/article/details/136061806",
                "articleType": 1,
                "viewCount": 965,
                "picList": [
                    "https://i-blog.csdnimg.cn/blog_migrate/cover/28442baf755a43a06d31c3a2cc43a265.png"
                ],
                "editUrl": "https://mp.csdn.net/console/editor/html/136061806",
                "collectCount": 11,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2024.02.28",
                "title": "开源BLHELI-S 代码详细解读(三）",
                "description": "如果不满足，则跳到run_to_wait_for_power_on_fail，这里上一篇有详细读了，是一些失败的检查，最坏会跳回init_no_signal。B. 否则就是在启动的阶段（STARTUP_PHASE），这里会将Startup_Zc_Timeout_Cntd减1(超时次数，wait_before_zc_scan会把它设置成2)，要是它还不是0，就跳到comp_check_timeout_extend_timeout,再调用setup_zc_scan_timeout。",
                "hasOriginal": true,
                "diggCount": 22,
                "commentCount": 3,
                "postTime": 1707219416000,
                "createTime": 1707040592000,
                "updateTime": 1709088561000,
                "url": "https://blog.csdn.net/aerror/article/details/136030320",
                "articleType": 1,
                "viewCount": 1252,
                "picList": [
                    "https://i-blog.csdnimg.cn/blog_migrate/cover/6b859b3f626db9c64f97c48293b82211.png"
                ],
                "editUrl": "https://mp.csdn.net/console/editor/html/136030320",
                "collectCount": 12,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2024.02.28",
                "title": "开源BLHELI-S 代码详细解读(二）",
                "description": "DIR_CHANGE_BRAKE没有设置的话，就跳到run_to_wait_for_power_on，不是的话，清除DIR_CHANGE_BRAKE的标志，清除PGM_DIR_REV标志，要是RCP_DIR_REV有设置，那么设置PGM_DIR_REV，然后把当前的阶段设置回INITIAL_RUN_PHASE。run_to_wait_for_power_on_fail是由前面的wait_for_comp_out_low和wait_for_comp_out_high的异常读取触发的。",
                "hasOriginal": true,
                "diggCount": 24,
                "commentCount": 4,
                "postTime": 1707038894000,
                "createTime": 1706576810000,
                "updateTime": 1709088086000,
                "url": "https://blog.csdn.net/aerror/article/details/135925136",
                "articleType": 1,
                "viewCount": 2566,
                "picList": [
                    "https://i-blog.csdnimg.cn/blog_migrate/cover/5fbe5c9a62364bdd8b20b324d539762a.png"
                ],
                "editUrl": "https://mp.csdn.net/console/editor/html/135925136",
                "collectCount": 24,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2024.02.27",
                "title": "如何编译BLHELI 及BLHELI_S",
                "description": "开头改成SilabsPath和 RaisonancePath你安装所在路径。BLHELI_S目录下，修改一下MakeHesfiles.bat。3. BLHeli目录下修改MakeHesfiles.bat。开头，改成KeilPath你安装 的目录。就可以双击编译BLHELI_S了。下载Ride和RKit-51。就可以双击编译BLHELI了。这里只说silab的两个版本。",
                "hasOriginal": true,
                "diggCount": 3,
                "commentCount": 4,
                "postTime": 1709049525000,
                "createTime": 1709049058000,
                "updateTime": 1709049529000,
                "url": "https://blog.csdn.net/aerror/article/details/136334495",
                "articleType": 1,
                "viewCount": 619,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/136334495",
                "collectCount": 4,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2024.02.06",
                "title": "开源BLHELI-S 代码详细解读(一）",
                "description": "Pgm_Beacon_Delay会和Power_On_Wait_Cnt_H相减，要是借位，就会开始beep f4, beep一次Power_On_Wait_Cnt_H会减1，就是Power_On_Wait_Cnt_L是255的时候beep一次了。如果有信号（Rcp_Timeout_Cntd不是零），同时New_Rcp(油门)不是零跳到 wait_for_power_on_nonzero， 再检查一次Rcp_Timeout_Cntd是不是零，要是不是零，那就跳到init_start。这个代码在inc里。",
                "hasOriginal": true,
                "diggCount": 26,
                "commentCount": 6,
                "postTime": 1706514744000,
                "createTime": 1706338268000,
                "updateTime": 1707184523000,
                "url": "https://blog.csdn.net/aerror/article/details/135883072",
                "articleType": 1,
                "viewCount": 3168,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/135883072",
                "collectCount": 45,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2024.01.18",
                "title": "GDB 调用无符号的任意函数",
                "description": "我们知道有符号的函数调用很简单了，直接像写c语言一样传参调用即可。但是无符号的就不知道怎么弄了，查遍了整个网络我都没有查到怎么做。5. until命令执行完成，说明函数也执行完成了，因为是返回地址设置了。1. 保存好所有的现场，如寄存器，当前pc,  返回地址，堆栈等。例子是调用一个对象转json的无符号函数，然后打印它返回的结果。6. 如果有需要打印一些结果，如p/x x0.4. 使用until 命令到执行到的返回地址。2. 替换返回地址，为当前指令下一个地址。3. 设置pc去执行函数，",
                "hasOriginal": true,
                "diggCount": 6,
                "commentCount": 0,
                "postTime": 1705555110000,
                "createTime": 1705554780000,
                "updateTime": 1705558094000,
                "url": "https://blog.csdn.net/aerror/article/details/135671769",
                "articleType": 1,
                "viewCount": 595,
                "picList": [
                    "https://i-blog.csdnimg.cn/blog_migrate/cover/9135a2d9ba113b74b25eef58f55a9697.png"
                ],
                "editUrl": "https://mp.csdn.net/console/editor/html/135671769",
                "collectCount": 11,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2024.01.18",
                "title": "使用GDB动态补丁ARM64的程序 跳转到任意地址",
                "description": "正常的 arm64跳转转令B,BL,BLX只有+-128M, 我们很多时候要跳到大于这个值的地址。我们在arm64下可以选的指令就只有br指令了。原来在ARM/Thumb中使用的 ldr pc, [pc, #?] ， 但arm64是不能这样了。但是它也需要给一个寄存器赋值一个64bit的地址， 可是arm的指令是固定的32bit的，即使给一个寄存器赋值一个64bit的值都麻烦。如 set *(int*)0xabc1234 = 0x58000070。补丁就是简单了，就是直接使用set命令就好了。",
                "hasOriginal": true,
                "diggCount": 7,
                "commentCount": 0,
                "postTime": 1705556698000,
                "createTime": 1705555398000,
                "updateTime": 1705556743000,
                "url": "https://blog.csdn.net/aerror/article/details/135671929",
                "articleType": 1,
                "viewCount": 683,
                "picList": [
                    "https://i-blog.csdnimg.cn/blog_migrate/cover/451bd3cb0200ebe9bda02f699c8b39d1.png"
                ],
                "editUrl": "https://mp.csdn.net/console/editor/html/135671929",
                "collectCount": 10,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2024.01.17",
                "title": "LUA 对象转excel",
                "description": "因为是excel, 所以第一层要是数组，否则没有什么意义，这里使用开源的json.lua， 但是开源的，对于数字作下标的，或者是一个数组里，不意类型的key混合的情况无法转换，所以先进行了扫描判断是不是混合的key. 是的话，取消key,把key到结构里作为一个字段处理。",
                "hasOriginal": true,
                "diggCount": 11,
                "commentCount": 0,
                "postTime": 1705454323000,
                "createTime": 1705453486000,
                "updateTime": 1705460958000,
                "url": "https://blog.csdn.net/aerror/article/details/135640545",
                "articleType": 1,
                "viewCount": 1105,
                "picList": [
                    "https://i-blog.csdnimg.cn/blog_migrate/cover/c9c219e8c8e420cf8fea55aafeda5335.png"
                ],
                "editUrl": "https://mp.csdn.net/console/editor/html/135640545",
                "collectCount": 9,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2024.01.11",
                "title": "JS 解析RGB控制台终端输出有颜色的LOG",
                "description": "RGB转consolecolor是自己了随便写的，差不多就算了。可以解析一下html的颜色输出log, 在终端打印成相近的颜色。",
                "hasOriginal": true,
                "diggCount": 7,
                "commentCount": 0,
                "postTime": 1704966983000,
                "createTime": 1704966983000,
                "updateTime": 1704967040000,
                "url": "https://blog.csdn.net/aerror/article/details/135535813",
                "articleType": 1,
                "viewCount": 494,
                "picList": [
                    "https://i-blog.csdnimg.cn/blog_migrate/cover/8a4bfa4a5d53ce03efff2abd920b6ca4.png"
                ],
                "editUrl": "https://mp.csdn.net/console/editor/html/135535813",
                "collectCount": 7,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2024.01.10",
                "title": "FRIDA 调用原生函数时使用补丁也生效",
                "description": "即，你补丁了一下函数，你去调用它，发现你使用frida打的补丁和hook不生效。1. 补丁函数必须使用。",
                "hasOriginal": true,
                "diggCount": 7,
                "commentCount": 0,
                "postTime": 1704861554000,
                "createTime": 1704861289000,
                "updateTime": 1704861555000,
                "url": "https://blog.csdn.net/aerror/article/details/135500509",
                "articleType": 1,
                "viewCount": 467,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/135500509",
                "collectCount": 6,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2024.01.08",
                "title": "如何绕过pairip的防护",
                "description": "签名绕过的第二个办法是不要改dex, 改一下androidmanifest.xml, 把 com.pairip.application.Application改成android.app.Application. 原理很是com.pairip.application.Application继承android.app.Application， 只是多了一些签名验证，刚好我们不需要，使用基类跑就好了。然后libpairip会开线程，开定时检查一些gdb和frida之类的，检查到就会来个异常把进程搞死.",
                "hasOriginal": true,
                "diggCount": 7,
                "commentCount": 6,
                "postTime": 1704532568000,
                "createTime": 1704532171000,
                "updateTime": 1704680406000,
                "url": "https://blog.csdn.net/aerror/article/details/135429039",
                "articleType": 1,
                "viewCount": 3187,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/135429039",
                "collectCount": 12,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2024.01.07",
                "title": "双向双路电调双流差速算法",
                "description": "这个很简单，就是直接使用油门+转向混合就好，超限的截掉，算法如下。",
                "hasOriginal": true,
                "diggCount": 9,
                "commentCount": 0,
                "postTime": 1704614020000,
                "createTime": 1704614020000,
                "updateTime": 1704614021000,
                "url": "https://blog.csdn.net/aerror/article/details/135440688",
                "articleType": 1,
                "viewCount": 498,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/135440688",
                "collectCount": 10,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2024.01.07",
                "title": "三星galaxy s9 root教程",
                "description": "11.  刷完后因为去掉了auto reboot, 是不会重启的，这个时候按 Volume down + blix + 电源键, 让它重启，这里很重要的一点，就是你必须在关键的一刻，你按键切换成 Volume Up +  blix + 电源键, 等到看到三星的logo，你松开电源键， 保持按住  Volume Up +  blix， 等几秒就看到twrp的界面。8.  按住音量 减（volume down) + blix + 电源键 ， 7秒后，进入刷机模式，按 volume up。",
                "hasOriginal": true,
                "diggCount": 7,
                "commentCount": 0,
                "postTime": 1704531906000,
                "createTime": 1704531146000,
                "updateTime": 1704613558000,
                "url": "https://blog.csdn.net/aerror/article/details/135428689",
                "articleType": 1,
                "viewCount": 4008,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/135428689",
                "collectCount": 7,
                "rtype": "article"
            },
            {
                "type": "download",
                "formatTime": "2023.11.24",
                "title": "Arm Mobile Studio 2023.4 windows x86",
                "description": "Arm Mobile Studio 2023.4 windows   性能调试利器，人手必 备",
                "fileType": "exe",
                "createTime": 1700787969000,
                "url": "https://download.csdn.net/download/aerror/88564843",
                "rtype": "file"
            },
            {
                "type": "blog",
                "formatTime": "2023.09.11",
                "title": "超简单免费转换ape到flac",
                "description": "4.到ape所在的目录，执行以下命令。3. 设置path到ffmpeg。1. 安装最新版的ffmpeg。2. 安装cywin环境。",
                "hasOriginal": true,
                "diggCount": 0,
                "commentCount": 0,
                "postTime": 1694435069000,
                "createTime": 1694435024000,
                "updateTime": 1694440207000,
                "url": "https://blog.csdn.net/aerror/article/details/132816898",
                "articleType": 1,
                "viewCount": 806,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/132816898",
                "collectCount": 0,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2023.07.01",
                "title": "一个TIMER软件模拟输出6个PWM",
                "description": "51单片机的timer很少，往往16bit的timer只有一个，可以硬件输出的channel也不多。只能使用软件模拟了。pwm是1-20ms一个周期，要是设置一个固定的周期，中断间隔就必须比较小，如0.01ms , 这个精度已经不怎么样了，但是每秒还是需要100000次中断，对于51来说，这个压力很大，实测效果很差。1. pwm需要每20ms对pin脚操作两次，周期开始设置它为1，到达指定时间时设置它为0，这个宽度，在航模的信号里，是1-2ms之间。我们将6个通道，每个分时3ms给它做这第一项的两次设置。",
                "hasOriginal": true,
                "diggCount": 0,
                "commentCount": 0,
                "postTime": 1687408614000,
                "createTime": 1687404998000,
                "updateTime": 1688208040000,
                "url": "https://blog.csdn.net/aerror/article/details/131339313",
                "articleType": 1,
                "viewCount": 923,
                "picList": [
                    "https://i-blog.csdnimg.cn/blog_migrate/cover/2b366d0b9167fcaaaa7176da0c026513.png"
                ],
                "editUrl": "https://mp.csdn.net/console/editor/html/131339313",
                "collectCount": 3,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2023.06.26",
                "title": "使用arduino Nano 自制nRF24LE1 的烧录器进行固件烧录",
                "description": "4.解压program.zip得到一个烧录的命令行工具，执行命令进行write或dump。3.  实质是spi下载来的，接线， nRF24LE1是3.3设备，别接5v。也有专门usb编程器，比较贵，可以买个arduino nano自已做一个。需要自己数一下多少pin的，然后和arduino的脚接起来.2. 使用arduino编译烧录固件。1. 下载arduino的烧录固件。",
                "hasOriginal": true,
                "diggCount": 0,
                "commentCount": 0,
                "postTime": 1687793803000,
                "createTime": 1687793157000,
                "updateTime": 1687793857000,
                "url": "https://blog.csdn.net/aerror/article/details/131407302",
                "articleType": 1,
                "viewCount": 1082,
                "picList": [
                    "https://i-blog.csdnimg.cn/blog_migrate/cover/20cc144273995f9843f385205390a13b.png"
                ],
                "editUrl": "https://mp.csdn.net/console/editor/html/131407302",
                "collectCount": 1,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2023.06.24",
                "title": "stm32flash碰到hex文件出错，读取超慢, 占用内存超多的问题解决",
                "description": "这个问题是因为sdcc生成的hex的每行的地址并不是排序的好的，有些高的地址在前面，低的地址在后面，这样的话，stm32flash这个hex.c并不能处理这个情况。里面有一个逻辑是用来填补0xff的，当后面的地址比前面大，一减得负数，但是变量是无符号的，结果就变成了4.2G了，然后一碰到一次就申请4.2G内存，然后填充0xff, 结果读了一个几十k的hex耗时十分钟，还占用超多内存，然后内存还是错的。解决办法，可以使用srec_cat把hex处理一下，输出的文件的地址就是排序好了。",
                "hasOriginal": true,
                "diggCount": 0,
                "commentCount": 0,
                "postTime": 1687610842000,
                "createTime": 1687610742000,
                "updateTime": 1687611242000,
                "url": "https://blog.csdn.net/aerror/article/details/131366245",
                "articleType": 1,
                "viewCount": 461,
                "picList": [
                    "https://i-blog.csdnimg.cn/blog_migrate/cover/28442baf755a43a06d31c3a2cc43a265.png"
                ],
                "editUrl": "https://mp.csdn.net/console/editor/html/131366245",
                "collectCount": 0,
                "rtype": "article"
            }
        ],
        "total": null
    }
}



{
    "code": 200,
    "message": "success",
    "traceId": "6f5e2f5c-13c6-4e8b-9ccd-63818ba6798c",
    "data": {
        "list": [
            {
                "type": "blog",
                "formatTime": "2023.06.24",
                "title": "MacOs 下用于性能优化的“perf“命令",
                "description": "MacOs下面没有这个命令，但有类似的，也是非常方便，它就是 Instruments， 是xcode自带一个性能分析和自动化测试的工具。需要安装Xcode.以下使用例子。",
                "hasOriginal": true,
                "diggCount": 0,
                "commentCount": 0,
                "postTime": 1687597206000,
                "createTime": 1687596893000,
                "updateTime": 1687597400000,
                "url": "https://blog.csdn.net/aerror/article/details/131363680",
                "articleType": 1,
                "viewCount": 1713,
                "picList": [
                    "https://i-blog.csdnimg.cn/blog_migrate/cover/364a602a8bad7ea2eac698e2443fe93c.png"
                ],
                "editUrl": "https://mp.csdn.net/console/editor/html/131363680",
                "collectCount": 0,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2023.01.19",
                "title": "高通Qualcomm处理器的手机或设备进EDL 9008模式的办法",
                "description": "由于我们有很多基于 Qualcomm 的设备，其中一些设备可能会古怪地猜测如何进入 EDL 模式，或者如何正确进入。例如，对于 Alcatel，您必须先按住两个音量键，然后再按住其中一个，对于 CAT B35，您必须按住 * 和 #，对于 8110，您必须按住 Up 和 Down，在此期间您必须插入电缆。因此，一个非常简单的电缆模块（一个穷人的夹具）就派上用场了，它根本不需要焊接。1. 拿一根备用的 microUSB 数据线，剥去中间某处的绝缘层。3.将USB端连接到PC，按住剥开的线约5秒钟。",
                "hasOriginal": true,
                "diggCount": 0,
                "commentCount": 0,
                "postTime": 1674032260000,
                "createTime": 1674032151000,
                "updateTime": 1674104509000,
                "url": "https://blog.csdn.net/aerror/article/details/128728196",
                "articleType": 1,
                "viewCount": 4479,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/128728196",
                "collectCount": 3,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2023.01.16",
                "title": "一个无线鼠标的HID Report Desc",
                "description": "【代码】一个无线鼠标的HID Report Desc。",
                "hasOriginal": true,
                "diggCount": 1,
                "commentCount": 0,
                "postTime": 1673510295000,
                "createTime": 1673510262000,
                "updateTime": 1673857362000,
                "url": "https://blog.csdn.net/aerror/article/details/128661408",
                "articleType": 1,
                "viewCount": 846,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/128661408",
                "collectCount": 5,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2022.11.24",
                "title": "如何修改macOS 照片应用的原图片的目录路径",
                "description": "磁盘系统坏了，是因为使用了HFS+ FOR WINDOWS 在macos和windows两边进行读写修改之类的，结果悲剧了，整个 HFS+的分区都变了成可读，也无法使用“急救”来修复。挂之前的现象的是写大文件会给截断，如8G的文件，copy过去，结果就变成了2G， 太坑了。。。好在还能读，赶紧把最重要的图片放到另一个硬盘上。放完之后，打开“照片”应用，提交原文件不可用，无法打开云云，于是尝试使用sqite3修复一下.1. 先把照片应用都退出ps axe | grep -i ph..",
                "hasOriginal": true,
                "diggCount": 0,
                "commentCount": 0,
                "postTime": 1603965581000,
                "createTime": 1603965581000,
                "updateTime": 1669266261000,
                "url": "https://blog.csdn.net/aerror/article/details/109365032",
                "articleType": 1,
                "viewCount": 2703,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/109365032",
                "collectCount": 1,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2022.07.20",
                "title": "MC6C迈克/FLYSKY富斯/WFLY2天地飞二代接收机远程刷固件教程",
                "description": "1. 安装ch341的驱动程序CH340/CH341 Windows串口驱动安装 - 南京沁恒微电子股份有限公司CH341SER.EXE - 南京沁恒微电子股份有限公司2.ch341的跳线跳到usb To ttl3.接收机飞线4.连接5v, RX, TX GND 到接收机的+,3, 1 ,G5.下载stm32isp程序安装6. 接上ch341到电脑7. 打开stm32isp程序8.输入密码，密码找卖家要，点击登录9.点击下载10. 拆除接收机飞线........",
                "hasOriginal": true,
                "diggCount": 0,
                "commentCount": 0,
                "postTime": 1652689281000,
                "createTime": 1652686326000,
                "updateTime": 1658246569000,
                "url": "https://blog.csdn.net/aerror/article/details/124800906",
                "articleType": 1,
                "viewCount": 3677,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/124800906",
                "collectCount": 1,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2022.05.10",
                "title": "富斯/MC6接收机说明书",
                "description": "正面 反面1. PWM输出通道多达6个， 可以自由切换7种模式，自由选择无刷，有刷，差速，炫酷的RGB全彩灯带等，自由玩耍。2. 集成两个5A有刷电调，通过模式选择，可以双发，可差速，支持8250以下的空心杯有刷电机3. 支持16通(MC6/7C 14通)sbus(第15通是RSSI),9通ppm（第9通是RSSI）,可以接飞控，飞fpv. 4. 支持Failsafe失控保护，只需要直接在摇控器的Fail...",
                "hasOriginal": true,
                "diggCount": 4,
                "commentCount": 0,
                "postTime": 1650438582000,
                "createTime": 1650438377000,
                "updateTime": 1652177645000,
                "url": "https://blog.csdn.net/aerror/article/details/124298189",
                "articleType": 1,
                "viewCount": 12290,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/124298189",
                "collectCount": 23,
                "rtype": "article"
            },
            {
                "type": "download",
                "formatTime": "2008.09.22",
                "title": "c#写的Sniffer的源代码",
                "description": "c#写的Sniffer的源代码\n网络监听",
                "fileType": "application/x-rar",
                "createTime": 1222091532000,
                "url": "https://download.csdn.net/download/aerror/643241",
                "rtype": "file"
            },
            {
                "type": "download",
                "formatTime": "2021.01.12",
                "title": "adbd root修改版本",
                "description": "修改过的adbd的arm的（非amr64）， 用来让adb 可以用root的权限启动，方便调试。",
                "fileType": "zip",
                "createTime": 1610433412000,
                "url": "https://download.csdn.net/download/aerror/14122036",
                "rtype": "file"
            },
            {
                "type": "download",
                "formatTime": "2011.12.09",
                "title": "lzma in as3",
                "description": "as3 实现的lzma解码, 从官方的java代码移植过来的。\n使用例子\n   public static function decode(src:ByteArray) : ByteArray\n        {\n            if (src == null || src.length < 16)\n            {\n                return null;\n            }\n\t\t\t\n\t\t\t\t\t\tvar inStream:InputStream = new InputStream(src);\n\t\t\t\t\t\tvar propertiesSize:int = 5;\n\t\t\t\t\t\tvar properties:Vector.<uint> = new Vector.<uint>(propertiesSize);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (inStream.readVOL(properties, 0, propertiesSize) != propertiesSize)\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\tvar decoder:Decoder = new Decoder();\n\t\t\t\t\t\tif (!decoder.SetDecoderProperties(properties))\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\tvar outSize:uint = 0;\n\t\t\t\t\t\tfor (var i:int = 0; i < 8; i++)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar v:int = inStream.read();\n\t\t\t\t\t\t\tif (v < 0)\n\t\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t\toutSize |= (v << (8 * i));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tvar ret:ByteArray = new ByteArray();\n\t\t\t\t\t\tret.length = outSize;\n\t\t\t\t\t\tvar outStream:OutputStream = new OutputStream(ret);\n\t\t\t\t\t\tif (!decoder.Code(inStream, outStream, outSize))\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\tinStream.close();\n\t\t\t\t\t\toutStream.close();\n\t\t\t\t\t\tret.position =0;\n\t\t\t\t\t\treturn ret;\n\n        }",
                "fileType": "rar",
                "createTime": 1323364008000,
                "url": "https://download.csdn.net/download/aerror/3898251",
                "rtype": "file"
            },
            {
                "type": "download",
                "formatTime": "2020.11.17",
                "title": "2013-2014的MBP的固件427",
                "description": "从Big sur安装包解出来的，2013和2014的MBP的固件, 版本是427,  放上来，方便大家更新，而无须下载12G的安装包，也不须要安装最新的系统就可以升级固件。\n具体升级操作办法看我的文章:https://blog.csdn.net/aerror/article/details/91486841",
                "fileType": "zip",
                "createTime": 1605600852000,
                "url": "https://download.csdn.net/download/aerror/13119980",
                "rtype": "file"
            },
            {
                "type": "download",
                "formatTime": "2014.03.04",
                "title": "Finger Sensing Pad macos x 触模板 驱动源代码",
                "description": "Finger Sensing Pad macos x 触模板 驱动源代码， 基于voodoops2项目。适用于Sentelic的\n STL3888-Cx and STL3888-Dx系列的触摸板。一般联想，神舟， msi的笔记本会用到。",
                "fileType": "gz",
                "createTime": 1393864842000,
                "url": "https://download.csdn.net/download/aerror/6988913",
                "rtype": "file"
            },
            {
                "type": "download",
                "formatTime": "2020.05.28",
                "title": "com.goplaycn.googleinstall.apk",
                "description": "这个安装器是从vivo的商店下载的，用来在小米10上来安装google play的服务，帐号和商店，之前发的安装包安装的google play会闪退。可以试一下这个会不会",
                "fileType": "apk",
                "createTime": 1590648153000,
                "url": "https://download.csdn.net/download/aerror/12470119",
                "rtype": "file"
            },
            {
                "type": "blog",
                "formatTime": "2022.01.12",
                "title": "自制2.4G ELRS接收机，不需要打板，容易制作",
                "description": "制作难度：中等，主要是器件太小，焊接需要耐心一。硬件材料1.LoRa射频模块，sx1280 ： E28-2G4M12S2.MCU Wifi模块：ESP-01F3.各色硅胶软线若干4.1k电阻5. TTL转串口 CH341 （CH340或FTDI随便一个即可。）6. DC-DC3.3v降压模块7. LED灯一个。二。软件：1. EpressLRS Configuratorhttps://github.com/ExpressLRS/ExpressLRS-Configu..",
                "hasOriginal": true,
                "diggCount": 5,
                "commentCount": 6,
                "postTime": 1641178492000,
                "createTime": 1641176594000,
                "updateTime": 1641970531000,
                "url": "https://blog.csdn.net/aerror/article/details/122284559",
                "articleType": 1,
                "viewCount": 10346,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/122284559",
                "collectCount": 33,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2022.01.04",
                "title": "自制2.4G ELRS TX高频头, 内置于富斯i6",
                "description": "制作难度：容易一。硬件材料：1.LoRa射频模块，sx1280 ： E28-2G4M27S2.MCU Wifi模块：ESP-WROOM323.各色硅胶软线若干4.1k电阻5.富斯FS I6摇控器6.JLink一个，刷写固件用7. 2.4G天线一个软件：1. EpressLRS Configuratorhttps://github.com/ExpressLRS/ExpressLRS-Configurator2.我写的的FSi6固件, ERFLY6,GitHub...",
                "hasOriginal": true,
                "diggCount": 8,
                "commentCount": 31,
                "postTime": 1641175314000,
                "createTime": 1641172301000,
                "updateTime": 1641259974000,
                "url": "https://blog.csdn.net/aerror/article/details/122283917",
                "articleType": 1,
                "viewCount": 9086,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/122283917",
                "collectCount": 33,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2021.12.31",
                "title": "STM32 LL库 操作FLASH 保存数据",
                "description": "#include \"string.h\"#include \"stm32f1xx_ll_system.h\"#define FLASH_PAGE_SIZE ((uint32_t)0x00000400)#define LL_FLASH_GET_FLAG(__FLAG__) (((__FLAG__) == FLASH_FLAG_OPTVERR) ? \\                      (FLASH-&gt;OBR &amp; FLASH_OBR_OPT...",
                "hasOriginal": true,
                "diggCount": 1,
                "commentCount": 0,
                "postTime": 1640937009000,
                "createTime": 1640937000000,
                "updateTime": 1640937204000,
                "url": "https://blog.csdn.net/aerror/article/details/122257900",
                "articleType": 1,
                "viewCount": 1989,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/122257900",
                "collectCount": 1,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2021.12.31",
                "title": "STM32 LL库使用SPI读写",
                "description": "void Rfchip_Spi_Init(void){ LL_GPIO_ResetOutputPin(GPIOA,LL_GPIO_PIN_5); LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_7); RFChip_Disable;}void Rf_Spi_Write_Byte(uint8_t dat){ LL_GPIO_ResetOutputPin(GPIOA,LL_GPIO_PIN_5); LL_GPIO_Se...",
                "hasOriginal": true,
                "diggCount": 0,
                "commentCount": 0,
                "postTime": 1640937062000,
                "createTime": 1640937049000,
                "updateTime": 1640937204000,
                "url": "https://blog.csdn.net/aerror/article/details/122257924",
                "articleType": 1,
                "viewCount": 3486,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/122257924",
                "collectCount": 2,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2021.12.31",
                "title": "Freescale 飞思卡尔使用UART中断，单线UART",
                "description": "1void setup_crsf_serial_port(uint32_t baud,crsf_read_cb_t read_cb){  if(g_crsf_read_callback==0)  {        g_crsf_read_callback = read_cb;      //uart_single_init(bdrate,DEFAULT_SYSTEM_CLOCK,bdrate);//Set single wire mode.      SIM-&gt;SCGC4 |= S",
                "hasOriginal": true,
                "diggCount": 0,
                "commentCount": 0,
                "postTime": 1640936787000,
                "createTime": 1640936765000,
                "updateTime": 1640937137000,
                "url": "https://blog.csdn.net/aerror/article/details/122257781",
                "articleType": 1,
                "viewCount": 549,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/122257781",
                "collectCount": 2,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2021.12.31",
                "title": "STM32 使用 LL库进行I2C读写",
                "description": "为什么要使用LL库，因为生成的固件大小可以小很多很多，MCU贵呀，可以省很多成本了。uint8_t i2c_read_len(I2C_TypeDef *I2Cx, uint8_t Addr , uint8_t Reg, uint8_t len,uint8_t *buf)；uint8_t i2c_write_len(I2C_TypeDef *I2Cx, uint8_t addr , uint8_t reg, uint8_t len,uint8_t *buf)；实现这两个函数，理论上全...",
                "hasOriginal": true,
                "diggCount": 11,
                "commentCount": 3,
                "postTime": 1640936805000,
                "createTime": 1636861493000,
                "updateTime": 1640937137000,
                "url": "https://blog.csdn.net/aerror/article/details/121315740",
                "articleType": 1,
                "viewCount": 6895,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/121315740",
                "collectCount": 42,
                "rtype": "article"
            },
            {
                "type": "download",
                "formatTime": "2020.05.27",
                "title": "GoogleInstaller_3.0.apk",
                "description": "用来安装google play的服务，帐号，同步通信录，和google 商店, 适用于华为nova , 小米10等等",
                "fileType": "apk",
                "createTime": 1590583105000,
                "url": "https://download.csdn.net/download/aerror/12467177",
                "rtype": "file"
            },
            {
                "type": "download",
                "formatTime": "2017.11.12",
                "title": "Geekbench 4.2.0破解补丁",
                "description": "自行到官网安装原版，把这里下载的替换MacOs下的同名的文件，修改到正确的权限， 要是出现文件给破坏，或者说无法打开，请设置信任任何来源，或者自己签名一下sudo codesign -f -s - Geekbench\\ 4",
                "fileType": "zip",
                "createTime": 1510498941000,
                "url": "https://download.csdn.net/download/aerror/10115611",
                "rtype": "file"
            }
        ],
        "total": null
    }
}


{
    "code": 200,
    "message": "success",
    "traceId": "053c6db4-2fd2-40cf-9b08-013ec0b62c59",
    "data": {
        "list": [
            {
                "type": "blog",
                "formatTime": "2021.11.10",
                "title": "MacOS Arduino开发环境搭建和编译minimosd-extra",
                "description": "1.从arduino官方网站：https://www.arduino.cc/en/Main/Software下载mac平台的IDE2.安装Arduino Makefile ，  git clone https://github.com/sudar/Arduino-Makefile.git3. 下载minimosd-extra源代码git clone https://github.com/night-ghost/minimosd-extra.git4.下载Sing...",
                "hasOriginal": true,
                "diggCount": 0,
                "commentCount": 0,
                "postTime": 1636525287000,
                "createTime": 1636524725000,
                "updateTime": 1636525422000,
                "url": "https://blog.csdn.net/aerror/article/details/121247353",
                "articleType": 1,
                "viewCount": 461,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/121247353",
                "collectCount": 1,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2021.11.01",
                "title": "STM32F103C6Tx CubeMx HAL I2c不工作原因",
                "description": "发现使用STM32F103C8 i2c是可以工作了，要是cpu选STM32F103C6Tx发现生成代码i2c不工作，多次尝试和比较发现，STM32F103C6Tx生成的i2c的msp初始化gpio的时候少了一个速度的配置:  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;加上这行就正常工作了。汗。void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle){  GPIO_InitTyp...",
                "hasOriginal": true,
                "diggCount": 6,
                "commentCount": 6,
                "postTime": 1635775436000,
                "createTime": 1635775341000,
                "updateTime": 1635780725000,
                "url": "https://blog.csdn.net/aerror/article/details/121089957",
                "articleType": 1,
                "viewCount": 2535,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/121089957",
                "collectCount": 21,
                "rtype": "article"
            },
            {
                "type": "download",
                "formatTime": "2019.11.07",
                "title": "File_DXE_driver_NVMe_mbp114.ffs",
                "description": "NVME MPB114 EFI, 上传给那些在安装包里找到不的人。\n这个是从安装下里解出来的。应该是直接替换上去就可以了",
                "fileType": "ffs",
                "createTime": 1573139740000,
                "url": "https://download.csdn.net/download/aerror/11965240",
                "rtype": "file"
            },
            {
                "type": "download",
                "formatTime": "2017.04.23",
                "title": "clover+EFI+gtx1080 +msiX99ARaider+i76800k+sm951 NVMe.zip",
                "description": "安装配置： clover+EFI+gtx1080 +msiX99ARaider+i76800k+sm951 NVMe",
                "fileType": "zip",
                "createTime": 1492960960000,
                "url": "https://download.csdn.net/download/aerror/9823210",
                "rtype": "file"
            },
            {
                "type": "blog",
                "formatTime": "2021.08.13",
                "title": "Light Room Classic 9.4 MacOS闪退解决办法",
                "description": "好像没有打开Light Room Classic, 今天打开发现slpash 出现之后就直接闪退，百思不解，好像很久什么都没有干呀。试一下把网络禁了，发现不闪了。 哦。。。。。原来如此。好吧，tcpdump分析一下，看看闪退之前访问了什么网络。sudo tcpdump -i en0 port 53Password:tcpdump: verbose output suppressed, use -v or -vv for full protocol decodelistening on e",
                "hasOriginal": true,
                "diggCount": 0,
                "commentCount": 0,
                "postTime": 1628783692000,
                "createTime": 1628783216000,
                "updateTime": 1628841021000,
                "url": "https://blog.csdn.net/aerror/article/details/119656642",
                "articleType": 1,
                "viewCount": 2476,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/119656642",
                "collectCount": 0,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2021.05.20",
                "title": "新唐n76e003单片机遥控PWM信号检测控制航灯系统",
                "description": "第一次使用学习单片机编程, 使用了n76e003， 主要在检测pwm的信号问题上花了比较多的时间，最后是使用了timer2的0通道来捕捉上升缘，1通道来捕捉下降缘来检测pwm的宽度。接收机是0-2000us pwm输出，500-1000是基础的pwm, 就是说没有信号也定期输出500（舵机）或1000（油门），这样单片机可以检测到有无信号.timer0来控制led的开关和闪烁，timer0使用10khz， timer2使用16m的时钟.#include \"N76E003.h\"#incl.",
                "hasOriginal": true,
                "diggCount": 1,
                "commentCount": 1,
                "postTime": 1621430121000,
                "createTime": 1621429858000,
                "updateTime": 1621489008000,
                "url": "https://blog.csdn.net/aerror/article/details/117046755",
                "articleType": 1,
                "viewCount": 1350,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/117046755",
                "collectCount": 6,
                "rtype": "article"
            },
            {
                "type": "download",
                "formatTime": "2008.05.31",
                "title": "SharpSniffer",
                "description": "提供的功能:<br><br>1.监听指定的网络接口的基于IP的网络包,如TCP,UDP,ICMP等<br><br>2.基本C#的脚本自定义数据包解析器, 动态编辑，加载, 保存，编译和管理C#解析器代码。对于一些简单的协议直接可以使用自定义的解析器进行分析和处理.<br><br>3.可方便的编辑，加载，保存,使用和管理协议过滤器.<br><br> <br><br>",
                "fileType": "application/x-rar",
                "createTime": 1212210976000,
                "url": "https://download.csdn.net/download/aerror/476261",
                "rtype": "file"
            },
            {
                "type": "blog",
                "formatTime": "2021.03.15",
                "title": "Macbook pro/air 2013 late -2014 使用转接卡更换NVME SSD休眠不醒问题的解决办法",
                "description": "、、1. 手上512GMBP 2013 late差不多满了，因为穷，所以在淘宝上买了一个NVME转Macbookpcie，然后再买一个NVME 2T的硬盘2. NVME因为需要最新的Firmware Rom支持，所以必须使用原装的硬盘（必须原装）安装Mac14以上，我安装了14.5.要不然识别不出来新安装的NVME硬盘3. 买之前就知道是会有休眠问题的，问了卖家推荐了一些型号说不...",
                "hasOriginal": true,
                "diggCount": 26,
                "commentCount": 200,
                "postTime": 1560273114000,
                "createTime": 1560273114000,
                "updateTime": 1615786299000,
                "url": "https://blog.csdn.net/aerror/article/details/91486841",
                "articleType": 1,
                "viewCount": 56155,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/91486841",
                "collectCount": 98,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2021.01.18",
                "title": "小米10 adbd 以root权限启动提供服务",
                "description": "之前写了类似的文章，但是这个文章办法不适用于小米10, 原文参考：https://blog.csdn.net/aerror/article/details/103270830主要有几个问题:1. supolicy这个在小米10 中root之后运行不起来，直接segment fault.2. 小米的文件系统remont 成rw失败,提示1|vangogh:/data/local # mount -o remount,rw /                ...",
                "hasOriginal": true,
                "diggCount": 0,
                "commentCount": 1,
                "postTime": 1610711694000,
                "createTime": 1610711694000,
                "updateTime": 1610936150000,
                "url": "https://blog.csdn.net/aerror/article/details/112686250",
                "articleType": 1,
                "viewCount": 2388,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/112686250",
                "collectCount": 4,
                "rtype": "article"
            },
            {
                "type": "download",
                "formatTime": "2021.01.15",
                "title": "adbd arm64 root 修改版",
                "description": "用于需要adbd root 权限启动的adbd 修改版本，从android 10 的system.img解压得到\n",
                "fileType": "zip",
                "createTime": 1610710181000,
                "url": "https://download.csdn.net/download/aerror/14429391",
                "rtype": "file"
            },
            {
                "type": "blog",
                "formatTime": "2021.01.12",
                "title": "Android 让adb以root的身份来运行",
                "description": "1. 首先安装自己手机对应的root的image, 如twrp.img    //上传supersu 到   adb push SuperSU-v2.79-20161211114519.zip  /mnt/sdcard/supersu.zip adb reboot fastboot   //等重启好  fastboot flash recovery twrp-3.3.1-0...",
                "hasOriginal": true,
                "diggCount": 0,
                "commentCount": 0,
                "postTime": 1574822685000,
                "createTime": 1574822685000,
                "updateTime": 1610433464000,
                "url": "https://blog.csdn.net/aerror/article/details/103270830",
                "articleType": 1,
                "viewCount": 3209,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/103270830",
                "collectCount": 4,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2020.06.03",
                "title": "小米10如何安装google play商店",
                "description": "查了一下网上说可以安装gmail, 小米商店就会自动安装google play的， 但是发现gmail在小米商店已经提示说“因为软件本身问题不能给安装\"， 查了一无果，于是用之前华为安装google的apk来进行安装.https://download.csdn.net/download/aerror/12467177...",
                "hasOriginal": true,
                "diggCount": 1,
                "commentCount": 0,
                "postTime": 1590583137000,
                "createTime": 1590583137000,
                "updateTime": 1591169728000,
                "url": "https://blog.csdn.net/aerror/article/details/106390026",
                "articleType": 1,
                "viewCount": 49147,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/106390026",
                "collectCount": 5,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2017.11.12",
                "title": "OpenGL shader 内置函数 和 unity3d shaderlib 内置函数对照表",
                "description": "-----opengl    ---shaderlabfract        fracmix                 lerptexture2D     tex2Dinversesqrt   rsqrtmodfood",
                "hasOriginal": true,
                "diggCount": 0,
                "commentCount": 0,
                "postTime": 1466082240000,
                "createTime": 1466082240000,
                "updateTime": 1510500000000,
                "url": "https://blog.csdn.net/aerror/article/details/51694603",
                "articleType": 1,
                "viewCount": 2519,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/51694603",
                "collectCount": 2,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2008.10.28",
                "title": "Windows获取本地机器的全部网络配置信息",
                "description": " Q:WINSOCK库的GetAddressByName 和gethostbyname 返回的信息无法满足我的要求,我想获取更详细的信息,我要知道一切信息,至少要像ipconfig /all 命令输出那样详细, 怎么办?A:使用windows SDK提供的IP Helper 库吧,它可以解决你上述的所有要求,使用它,你可以获取或配置本机的TCP/IP( Transmission Con",
                "hasOriginal": true,
                "diggCount": 0,
                "commentCount": 0,
                "postTime": 1225195320000,
                "createTime": 1225195320000,
                "updateTime": 1225196340000,
                "url": "https://blog.csdn.net/aerror/article/details/3169102",
                "articleType": 1,
                "viewCount": 9121,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/3169102",
                "collectCount": 3,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2020.12.10",
                "title": "编写ASCOM平台的驱动",
                "description": "近来在玩天文，自己DIY了一个电动的调焦。ASCOM平台是一个天文的驱动和软件的开发标准，它是一个开源的开放平台。主要是使用了.net的技术。https://ascom-standards.org开发工具：1. Visual studion 2012/2013，太高的版本好像开发包不支持。2.Inno setup, 用来制作驱动的安装包，ascom的开发包，有自动生成这个安装脚本的工具，很方便3.开发文档：https://ascom-standards.org/Develop...",
                "hasOriginal": true,
                "diggCount": 4,
                "commentCount": 8,
                "postTime": 1607567091000,
                "createTime": 1607567091000,
                "updateTime": 1607567160000,
                "url": "https://blog.csdn.net/aerror/article/details/110947271",
                "articleType": 1,
                "viewCount": 5471,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/110947271",
                "collectCount": 19,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2020.10.30",
                "title": "lldb调试objc程序使用正则表达式下断点",
                "description": "ObjectC的函数名怪怪的，又空格，又+/-:号，又括号。下断点很麻烦。可以试试 -r选项 , 可以正则表达式来模糊下断点，还是比较方便了。如:(lldb) br set -r IPXReconnectManager initWithAsset:hostWindow:finishedBlock\\]Breakpoint 18: 20 locations.(lldb) breakpoint listCurrent breakpoints:18: regex = 'IPXRec.",
                "hasOriginal": true,
                "diggCount": 0,
                "commentCount": 0,
                "postTime": 1603878259000,
                "createTime": 1603878259000,
                "updateTime": 1604026505000,
                "url": "https://blog.csdn.net/aerror/article/details/109338632",
                "articleType": 1,
                "viewCount": 483,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/109338632",
                "collectCount": 0,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2020.10.30",
                "title": "如何使用MacOs/IOS的私用不公开框架(PrivateFrameworks)",
                "description": "我需要写个程序调用一下[PLSandboxHelper processCanReadSandboxForPath], 它是一个由AssetsLibraryServices.framework(/System/Library/PrivateFrameworks/AssetsLibraryServices.framework)提供的。有两个问题要解决：1. 没有这个的头文件， 编译就会不过2.Frameworks那里在 Link Binary With Library里没有列出PrivateFramew",
                "hasOriginal": true,
                "diggCount": 0,
                "commentCount": 0,
                "postTime": 1604026193000,
                "createTime": 1604026193000,
                "updateTime": 1604026262000,
                "url": "https://blog.csdn.net/aerror/article/details/109380590",
                "articleType": 1,
                "viewCount": 3591,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/109380590",
                "collectCount": 0,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2020.09.23",
                "title": "关于Hook unistd中open, read, write, close的一些技巧",
                "description": "open , read, write, close, flock, fileno, lseek, lseek64, 这些都是使用一个int的文件描述符的，对于我们hook的时候，一般来说，我们是想在open这里，我们去打开一个自己的文件，可能这个并不是一个真实的文件，如这个我们需要维护一个类的指针，我们必须用一个整数去关联这个这个指针，因为返回值，我们只能是整型，fd这个东西是一个整数，它有自己的规则，又是系统维护的，我们必须返回一个整数和系统不冲突或重复的，我们才能在后面的read, write这里判断出",
                "hasOriginal": true,
                "diggCount": 0,
                "commentCount": 0,
                "postTime": 1589268372000,
                "createTime": 1589268372000,
                "updateTime": 1600858049000,
                "url": "https://blog.csdn.net/aerror/article/details/106076941",
                "articleType": 1,
                "viewCount": 986,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/106076941",
                "collectCount": 0,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2020.08.25",
                "title": "Wacom 数位板 和冠 手绘笔 Photoshop MacOS 延时卡顿丢笔解决办法",
                "description": "试了在macos的下面使用photoshop 笔画延时，经常画得快就偶尔丢几笔，直线变折线，查了以下：1. 关闭平滑2.关闭压力3.打开首选项－常规－性能,选择图形处理器设置－高级，将第一项改为正常或基本4. 关闭标尺5.点击画笔设置,勾选间距一栏，并将间距数值调整到40以上100以下...",
                "hasOriginal": true,
                "diggCount": 1,
                "commentCount": 2,
                "postTime": 1598185502000,
                "createTime": 1598185502000,
                "updateTime": 1598322275000,
                "url": "https://blog.csdn.net/aerror/article/details/108187163",
                "articleType": 1,
                "viewCount": 7033,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/108187163",
                "collectCount": 0,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2020.08.22",
                "title": "使用nghttp2实现IOS 的 APNS的推送测试例子",
                "description": "能用代码就不废话#ifdef HAVE_CONFIG_H#  include &lt;config.h&gt;#endif /* HAVE_CONFIG_H */#include &lt;inttypes.h&gt;#include &lt;stdlib.h&gt;# include &lt;fcntl.h&gt;#include &lt;sys/types.h&gt;#  include &lt;sys/socket.h&gt;#  include &lt;netdb..",
                "hasOriginal": true,
                "diggCount": 0,
                "commentCount": 0,
                "postTime": 1598088535000,
                "createTime": 1598088535000,
                "updateTime": 1598088851000,
                "url": "https://blog.csdn.net/aerror/article/details/108171590",
                "articleType": 1,
                "viewCount": 828,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/108171590",
                "collectCount": 2,
                "rtype": "article"
            }
        ],
        "total": null
    }
}


{
    "code": 200,
    "message": "success",
    "traceId": "f3971858-0bd8-4764-bb90-4f0add6e6992",
    "data": {
        "list": [
            {
                "type": "blog",
                "formatTime": "2020.07.31",
                "title": "如何解开和反编译思科cisco的交换机固件",
                "description": "下载固件，如image_tesla_hybrid_2.5.0.83_release_cisco_signed.bin1.下载安装 binwalkbrew install binwalk2.下载安装lzopbrew install loop3.使用binwalk解开文件binwalk -eM   image_tesla_hybrid_2.5.0.83_release_cisco_signed.bin4._image_tesla_hybrid_2.5.0.83_release",
                "hasOriginal": true,
                "diggCount": 1,
                "commentCount": 5,
                "postTime": 1596166791000,
                "createTime": 1596166791000,
                "updateTime": 1596182819000,
                "url": "https://blog.csdn.net/aerror/article/details/107709901",
                "articleType": 1,
                "viewCount": 2396,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/107709901",
                "collectCount": 1,
                "rtype": "article"
            },
            {
                "type": "download",
                "formatTime": "2017.07.14",
                "title": "Clover_v2.4k_r4114 for x99",
                "description": "针对x99主板：\n1.将free2000这个功能和OsxAptioFixDrv-64.efi ，合并到一起了，安装时只需要安装OsxAptioFixDrv-64.efi,其它OsxAptio开头的都不需要了.\n2. 如果不使用OsxAptioFixDrv-64.efi, 可以使用OsxAptioFix2Drv-64.efi,这个也是合并了free2000的功能， 安装了这个其它OsxAptio开头的都不需要了.\n\n1.2 都是为了解决关于x99启动时无法 boot起来的错误:\n OsxAptioFixDrv: AllocateRelocBlock(): can not allocate relocation block (0x16687 pages below 0x100000000)",
                "fileType": "pkg",
                "createTime": 1500044795000,
                "url": "https://download.csdn.net/download/aerror/9899392",
                "rtype": "file"
            },
            {
                "type": "download",
                "formatTime": "2017.11.12",
                "title": "Clover EFI For MSI X99ARaider E5-2696V4 MacOS High Sierra 10.13",
                "description": "Clover EFI For MSI X99ARaider E5-2696V4 MacOS High Sierra 10.13,  相同主板的直接替换就好了。",
                "fileType": "zip",
                "createTime": 1510499565000,
                "url": "https://download.csdn.net/download/aerror/10115615",
                "rtype": "file"
            },
            {
                "type": "download",
                "formatTime": "2019.07.03",
                "title": "Gigabyte Phoenix X99 SLI +Vega64+Xeon E5 2996V4 EFI.zip",
                "description": "Gigabyte Phoenix X99 SLI +Vega64+Xeon E5 2996V4 黑苹果Clover EFI  用于MacOS 10.14.5",
                "fileType": "zip",
                "createTime": 1562089284000,
                "url": "https://download.csdn.net/download/aerror/11270433",
                "rtype": "file"
            },
            {
                "type": "download",
                "formatTime": "2019.11.27",
                "title": "twrp-3.3.1-0-shamu.img",
                "description": "这个是用于nexus 6的 root的recovery的img, 请看清楚，刷错后果自负，这个是来自twrp的官方，仅仅是搬运过来，方便大家下载的。",
                "fileType": "img",
                "createTime": 1574822668000,
                "url": "https://download.csdn.net/download/aerror/12000228",
                "rtype": "file"
            },
            {
                "type": "download",
                "formatTime": "2019.11.30",
                "title": "VegaGraphicsFixup.kext.zip",
                "description": "Vega64 macOS 10.15.1 启动后黑屏问题解决驱动，原来使用的补丁已经失效了，上传给有需要的人使用了。",
                "fileType": "zip",
                "createTime": 1575122563000,
                "url": "https://download.csdn.net/download/aerror/12007705",
                "rtype": "file"
            },
            {
                "type": "download",
                "formatTime": "2017.11.12",
                "title": "Synalyze It! Pro 1.20 破解补丁",
                "description": "Synalyze It! Pro 1.20 补丁，自行到官网安装原版，把这里下载的替换MacOs下的同名的文件，修改到正确的权限，\n要是出现文件给破坏，或者说无法打开，请设置信任任何来源，或者自己签名一下sudo codesign -f -s -  MacOS/Synalyze\\ It\\!\\ Pro",
                "fileType": "zip",
                "createTime": 1510498698000,
                "url": "https://download.csdn.net/download/aerror/10115608",
                "rtype": "file"
            },
            {
                "type": "blog",
                "formatTime": "2020.06.25",
                "title": "神牛TT685C闪光灯ETTL模式不同步解决方案",
                "description": "相机闪光灯突然工作不正常了，虽然灯有闪但是闪了和没闪一样，严重曝光不足，遍查了网上也没发现解决方案。开机后按住 “Zm/C.Fn”按键 2 秒，进入 C.Fn 菜单。右上角显示 Ver 3.3 为版本号.发现 godox.com.cn/Downloads_s_Firmware.htmlTT685C_V3.4点击下载2019-05-071、解决与新相机EOS R、1500D、3000D的兼容问题。2、兼容神牛无线宾得(PENTAX)X系统。刚好是我的相机型号, 应该是要刷.",
                "hasOriginal": true,
                "diggCount": 0,
                "commentCount": 0,
                "postTime": 1593010676000,
                "createTime": 1593010676000,
                "updateTime": 1593015776000,
                "url": "https://blog.csdn.net/aerror/article/details/106952336",
                "articleType": 1,
                "viewCount": 3967,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/106952336",
                "collectCount": 0,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2020.06.09",
                "title": "编译php7 指定remi扩展目录和ini的配置目录",
                "description": "安装了remi源的php74 , 想修改一下代码，使用回remi的配置和扩展,可以这样做：EXTENSION_DIR=/opt/remi/php74/root/usr/lib64/php/modules ./configure --prefix=/opt/remi/php74/root --with-config-file-path=/etc/opt/remi/php74/",
                "hasOriginal": true,
                "diggCount": 0,
                "commentCount": 0,
                "postTime": 1591684056000,
                "createTime": 1591684056000,
                "updateTime": 1591684463000,
                "url": "https://blog.csdn.net/aerror/article/details/106640660",
                "articleType": 1,
                "viewCount": 1091,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/106640660",
                "collectCount": 0,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2020.06.01",
                "title": "如何修改android的so文件进行api HOOK钩子补丁",
                "description": "1. 准备工具和环境  1.1 android NDK  1.2 android SDK  1.3Synalyze It! Pro, 安装ELF语法  1.4 elf文件格式文档.2. 文件格式是 ELF, 组织如下实例:3.我们只需要做以下修改就可以，  3.1 在SHT_DYNAMIC这里增加我们的so，一般来说这个段都有一些...",
                "hasOriginal": true,
                "diggCount": 0,
                "commentCount": 0,
                "postTime": 1588232941000,
                "createTime": 1588232941000,
                "updateTime": 1590976549000,
                "url": "https://blog.csdn.net/aerror/article/details/105861731",
                "articleType": 1,
                "viewCount": 1116,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/105861731",
                "collectCount": 1,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2020.05.18",
                "title": "GDB windows powershell 如何把一个命令输出结果赋值给一个变量",
                "description": "找了一轮没有找到，发现可以使用$X=(...)这样来实现awk是安装了http://sourceforge.net/projects/gnuwin32/files/gawk/3.1.6-1/gawk-3.1.6-1-bin.zip/downloadPS C:\\Users&gt; $XXX=(adb shell ps  | findstr \"hsalpha\" | awk '{print $2}')PS C:\\Users&gt; echo XXX7147PS C:\\Users&gt; $.",
                "hasOriginal": true,
                "diggCount": 0,
                "commentCount": 0,
                "postTime": 1589616132000,
                "createTime": 1589616132000,
                "updateTime": 1589780838000,
                "url": "https://blog.csdn.net/aerror/article/details/106160361",
                "articleType": 1,
                "viewCount": 4668,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/106160361",
                "collectCount": 2,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2020.05.04",
                "title": "使用shell将一个目录的所有文件移动以年月为名的文件夹中",
                "description": "首先创建一个临时的目录：mkdir tempformv使用stat,cut和mkdir创建以月份为名的文件夹$stat -c \"%y\" * | cut -b1-7 | sort | uniq | while read line ;do mkdir tempformv/$line; done $ls tempformv/2010-05  2020-05生成要执行的命令...",
                "hasOriginal": true,
                "diggCount": 0,
                "commentCount": 0,
                "postTime": 1588604578000,
                "createTime": 1588604578000,
                "updateTime": 1588604578000,
                "url": "https://blog.csdn.net/aerror/article/details/105925204",
                "articleType": 1,
                "viewCount": 326,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/105925204",
                "collectCount": 0,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2020.05.03",
                "title": "Linux如何自动挂载和卸载usb外部硬盘",
                "description": "有一个usb外置的硬盘，想插电直接可以linux挂载，关电linux直接umount, 查了一下没有一个比较合适的解决方案。于是自己写了一脚本，然后使用crontab 每10秒运行一次。计划任务,增加每分钟的任务crontab -e#增加每分钟的任务* * * * * /etc/misc/usb_auto_check.sh &amp;&gt;&gt;/var/log/usb_aut...",
                "hasOriginal": true,
                "diggCount": 1,
                "commentCount": 0,
                "postTime": 1588483676000,
                "createTime": 1588483676000,
                "updateTime": 1588483764000,
                "url": "https://blog.csdn.net/aerror/article/details/105902581",
                "articleType": 1,
                "viewCount": 402,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/105902581",
                "collectCount": 1,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2020.04.14",
                "title": "MacOS IOS Mach-O修改补丁之增加外部未定义符号并调用",
                "description": "1. Mach-O的文件的基本结果如下：2.例子文件所有头部：Mach header      magic cputype cpusubtype  caps    filetype ncmds sizeofcmds      flags   MH_MAGIC     ARM         V7  0x00      OBJECT     5       1960 SUBSE...",
                "hasOriginal": true,
                "diggCount": 0,
                "commentCount": 0,
                "postTime": 1586772212000,
                "createTime": 1586772212000,
                "updateTime": 1586870643000,
                "url": "https://blog.csdn.net/aerror/article/details/105492412",
                "articleType": 1,
                "viewCount": 686,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/105492412",
                "collectCount": 0,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2020.03.09",
                "title": "使用sql批量修改MacOs照片应用(Photos)上的照片时间",
                "description": "1. cd ~/照片图库.photoslibrary2. sqlite33. .open Photos.sqliteACHANGE                                 ATRANSACTION                            ATRANSACTIONSTRING                      ZADDITIO...",
                "hasOriginal": true,
                "diggCount": 0,
                "commentCount": 0,
                "postTime": 1583552172000,
                "createTime": 1583552172000,
                "updateTime": 1583742739000,
                "url": "https://blog.csdn.net/aerror/article/details/104711872",
                "articleType": 1,
                "viewCount": 1106,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/104711872",
                "collectCount": 0,
                "rtype": "article"
            },
            {
                "type": "download",
                "formatTime": "2008.10.11",
                "title": "j2me手机游戏之俄罗斯方块",
                "description": "j2me开发的手机游戏,俄罗斯方块的完整源代码,包括编译脚本,需要安装Moto的Motorola J2ME(TM) SDK v5.4.2 for Linux OS Products",
                "fileType": "application/x-rar",
                "createTime": 1223734373000,
                "url": "https://download.csdn.net/download/aerror/682898",
                "rtype": "file"
            },
            {
                "type": "blog",
                "formatTime": "2019.12.25",
                "title": "libpng error: iTXt: chunk data is too large error: PNG unsigned integer out of range",
                "description": "使用png读某些png时，出现libpng error: iTXt: chunk data is too large error: PNG unsigned integer out of range这样的错误，发现是adobe 的XMP非常大引起的：$ xxd test.png00000000: 8950 4e47 0d0a 1a0a 0000 000d 4948 4452  .PNG.....",
                "hasOriginal": true,
                "diggCount": 0,
                "commentCount": 2,
                "postTime": 1576513953000,
                "createTime": 1576513953000,
                "updateTime": 1577289512000,
                "url": "https://blog.csdn.net/aerror/article/details/103572570",
                "articleType": 1,
                "viewCount": 5560,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/103572570",
                "collectCount": 0,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2019.12.11",
                "title": "如何在gdb里打印unicode 16(utf-16) C#的字符串",
                "description": "使用调用unity3d的il2cpp的时候，往往需要看看一下字符，但是这个c#的字符串是一个对象来的，并且是一个16bit的方式一个字符的unicode编码。x/hs addr效果如下：(gdb) x/hs 0x779f8e8c0x779f8e8c:\tu\"I am the unicode strings\"//断点Resources.Load之后，打印一下传入的文件的名字...",
                "hasOriginal": true,
                "diggCount": 0,
                "commentCount": 0,
                "postTime": 1576051535000,
                "createTime": 1576051535000,
                "updateTime": 1576052003000,
                "url": "https://blog.csdn.net/aerror/article/details/103494357",
                "articleType": 1,
                "viewCount": 560,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/103494357",
                "collectCount": 0,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2019.11.30",
                "title": "X99 E5-2696V4 macOS Catalina 10.15.1 内核补丁",
                "description": "//Kernel Patch 补丁//解决无法看到进度条，无法加载内核，或者启动的时候突然重启问题 FIND: 723CD077 500FB6C0 REPL:  6A3CD077 500FB6C0 // _xcpm_cpuid_set_info FIND:  C1E30848 63D389D0 48C1EA20 REPL: C1E308B8 00FF0000 31D29090 //_xc...",
                "hasOriginal": true,
                "diggCount": 0,
                "commentCount": 7,
                "postTime": 1575044349000,
                "createTime": 1575044349000,
                "updateTime": 1575122580000,
                "url": "https://blog.csdn.net/aerror/article/details/103319850",
                "articleType": 1,
                "viewCount": 2168,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/103319850",
                "collectCount": 0,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2019.11.27",
                "title": "以太坊代码流程分析",
                "description": "去年研究的时候画的图，初始化，合约的执行流程，cpu挖矿的流程挖矿的循环:",
                "hasOriginal": true,
                "diggCount": 0,
                "commentCount": 0,
                "postTime": 1574854685000,
                "createTime": 1574854685000,
                "updateTime": 1574855879000,
                "url": "https://blog.csdn.net/aerror/article/details/103281979",
                "articleType": 1,
                "viewCount": 154,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/103281979",
                "collectCount": 0,
                "rtype": "article"
            }
        ],
        "total": null
    }
}


{
    "code": 200,
    "message": "success",
    "traceId": "0fdb6d09-c8ef-49b1-b794-ea243e9f2de9",
    "data": {
        "list": [
            {
                "type": "blog",
                "formatTime": "2025.02.13",
                "title": "搭建一个本地DeepSeek r1 14B配置低到惊喜！附超简单步骤",
                "description": "发现只需要11G显存！只使用一张rtx3060 12G的就搞定了。速度和答案质量还不错，太令人惊喜了！7B只需要5GB的显存。",
                "hasOriginal": true,
                "diggCount": 1,
                "commentCount": 0,
                "postTime": 1739418028000,
                "createTime": 1739417428000,
                "updateTime": 1739451826000,
                "url": "https://blog.csdn.net/aerror/article/details/145608401",
                "articleType": 1,
                "viewCount": 361,
                "picList": [
                    "https://i-blog.csdnimg.cn/blog_migrate/tags/6c820fa0b7902309f0622e7fd3a773c8.png"
                ],
                "editUrl": "https://mp.csdn.net/console/editor/html/145608401",
                "collectCount": 0,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2025.02.06",
                "title": "c语言使用通配符取一个目录下符合规则的所有文件的最简单办法",
                "description": "其实很多种办法，可以使用dir相关的函数把文件都枚举出来，然后使用正则表达式，这个是我之前的做法。如此简单，没有想到吧？",
                "hasOriginal": true,
                "diggCount": 1,
                "commentCount": 0,
                "postTime": 1738809154000,
                "createTime": 1738808785000,
                "updateTime": 1738855503000,
                "url": "https://blog.csdn.net/aerror/article/details/145468061",
                "articleType": 1,
                "viewCount": 144,
                "picList": [
                    "https://i-blog.csdnimg.cn/blog_migrate/tags/e8ea92f580f30873eef61616bc0e4bf2.png"
                ],
                "editUrl": "https://mp.csdn.net/console/editor/html/145468061",
                "collectCount": 0,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2025.02.06",
                "title": "使用deepseek写一个单击，双击和长按的检测函数",
                "description": "DeepSeek好火，注册试用一下：提问：请使用c语言写一个函数，输入参数是是为： A为当前的输入量，1000-2000，根据它的变化， B为当前这个输入量的状态数据结构， 函数检查这个A，判断它的变化，从而判断用户是单击还双击，还是长按。具体当A变化量大于300时认为是开始了有效的点击，这时认为是按下按钮，记录变化前的值为C ，当A变回和C差值只有50左右时，认为释放按钮。已深度思考（用时 272 秒）",
                "hasOriginal": true,
                "diggCount": 12,
                "commentCount": 0,
                "postTime": 1738646246000,
                "createTime": 1738645768000,
                "updateTime": 1738809366000,
                "url": "https://blog.csdn.net/aerror/article/details/145439555",
                "articleType": 1,
                "viewCount": 661,
                "picList": [
                    "https://i-blog.csdnimg.cn/blog_migrate/tags/6c820fa0b7902309f0622e7fd3a773c8.png"
                ],
                "editUrl": "https://mp.csdn.net/console/editor/html/145439555",
                "collectCount": 7,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2025.02.03",
                "title": "Macos编译openjdk因berkeley-db版本问题失败解决办法",
                "description": "看来是优先使用/usr/local下的头文件了， 简单处理一下，看起来brew也有多份，直接删除一下/usr/local下的db.h及相关的头文件。原因是berkeley-db最新的版本这个get的定义是多一个DB_TXN的参数，看名字是用于事务处理的。一开始以为是版本低了，upgrade了一下没有解决，后来找了一下xcode目录下,也有一个db.h。同时get这个函数看起来也刚好是只有四个参数，打开看了一下，好像比较老的，然后再编译，顺利通过。",
                "hasOriginal": true,
                "diggCount": 2,
                "commentCount": 0,
                "postTime": 1738552560000,
                "createTime": 1738551857000,
                "updateTime": 1738552560000,
                "url": "https://blog.csdn.net/aerror/article/details/145428356",
                "articleType": 1,
                "viewCount": 647,
                "picList": [
                    "https://i-blog.csdnimg.cn/blog_migrate/tags/6c1354b6aa25593ad25c55191fc96eeb.png"
                ],
                "editUrl": "https://mp.csdn.net/console/editor/html/145428356",
                "collectCount": 5,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2025.01.24",
                "title": "snappy简单测试",
                "description": "snappy是一个比较快的压缩算法，没有cli， 需要自己写一个。",
                "hasOriginal": true,
                "diggCount": 2,
                "commentCount": 0,
                "postTime": 1737689446000,
                "createTime": 1737689446000,
                "updateTime": 1737693392000,
                "url": "https://blog.csdn.net/aerror/article/details/145338809",
                "articleType": 1,
                "viewCount": 168,
                "picList": [
                    "https://i-blog.csdnimg.cn/blog_migrate/tags/e658252d918e15d0df73656bca64a96f.png"
                ],
                "editUrl": "https://mp.csdn.net/console/editor/html/145338809",
                "collectCount": 0,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2025.01.23",
                "title": "网络通讯协议定义语言及代理代码生成器",
                "description": "<!-- /* Font Definitions */ @font-face\t{font-family:宋体;\tpanose-1:2 1 6 0 3 1 1 1 1 1;\tmso-font-alt:SimSun;\tmso-font-charset:134;\tmso-generic-font-family:auto;\tmso-font-pitch:variable;",
                "hasOriginal": true,
                "diggCount": 0,
                "commentCount": 0,
                "postTime": 1250908500000,
                "createTime": 1250908500000,
                "updateTime": 1737633722000,
                "url": "https://blog.csdn.net/aerror/article/details/4472057",
                "articleType": 1,
                "viewCount": 10868,
                "picList": [
                    "https://i-blog.csdnimg.cn/blog_migrate/tags/b15c6791119fa1bec4afe2397d081db0.png"
                ],
                "editUrl": "https://mp.csdn.net/console/editor/html/4472057",
                "collectCount": 2,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2025.01.23",
                "title": "cannot locate symbol “_ZTTNSt6__ndk114basic_ofstreamIcNS_11char_traitsIcEEEE“ 的解决办法",
                "description": "使用clang++编译出来的android程序，实际真机运行出现 cannot locate symbol \"_ZTTNSt6__ndk114basic_ofstreamIcNS_11char_traitsIcEEEE\" referenced by。重新上传，运行ok.",
                "hasOriginal": true,
                "diggCount": 3,
                "commentCount": 0,
                "postTime": 1737615995000,
                "createTime": 1737615870000,
                "updateTime": 1737616102000,
                "url": "https://blog.csdn.net/aerror/article/details/145323851",
                "articleType": 1,
                "viewCount": 356,
                "picList": [
                    "https://i-blog.csdnimg.cn/blog_migrate/tags/671f42ab07fd990f949a1c903140dd83.png"
                ],
                "editUrl": "https://mp.csdn.net/console/editor/html/145323851",
                "collectCount": 0,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2025.01.23",
                "title": "Macos交叉编译android的cmix压缩算法",
                "description": "LFLAGS和CC改一下，注释的是原来的内容。然后执行make就可以了。",
                "hasOriginal": true,
                "diggCount": 1,
                "commentCount": 0,
                "postTime": 1737609021000,
                "createTime": 1737608839000,
                "updateTime": 1737609022000,
                "url": "https://blog.csdn.net/aerror/article/details/145321646",
                "articleType": 1,
                "viewCount": 770,
                "picList": [
                    "https://i-blog.csdnimg.cn/blog_migrate/tags/b15c6791119fa1bec4afe2397d081db0.png"
                ],
                "editUrl": "https://mp.csdn.net/console/editor/html/145321646",
                "collectCount": 0,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2025.01.23",
                "title": "Macos下交叉编译安卓的paq8px压缩算法 ",
                "description": "修改paq8px/CMakeLists.txt, 如下，去掉clang++不支持的-march=nocona和-floop-strip-mine。稍旧的ndk并不能编译成功，需要下载最新的ndkr27c, 最后是使用clang来编译。官方没有android的编译方法，自己编写脚本在macos下交叉编译.编译build.sh。",
                "hasOriginal": true,
                "diggCount": 3,
                "commentCount": 0,
                "postTime": 1737600961000,
                "createTime": 1737600713000,
                "updateTime": 1737601868000,
                "url": "https://blog.csdn.net/aerror/article/details/145319677",
                "articleType": 1,
                "viewCount": 716,
                "picList": [
                    "https://i-blog.csdnimg.cn/blog_migrate/tags/b15c6791119fa1bec4afe2397d081db0.png"
                ],
                "editUrl": "https://mp.csdn.net/console/editor/html/145319677",
                "collectCount": 0,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2025.01.23",
                "title": "从根源分析，调试，定位和解决MacOS ld: unsupported tapi file type ‘!tapi-tbd‘ in YAML file",
                "description": "发现是最后一个spam是调用/usr/local/Cellar/gcc/14.2.0_1/bin/../libexec/gcc/x86_64-apple-darwin20/14/collect2。这个anaconda的ld和系统的是不匹配的，但是它为了penv把这个替换了，结果collect2使用了它设置的工具链的ld. 然后引起这个问题。本文希望可以帮到需要的人，还是不人遇到这个的，可能原因不大一样，但是这个文章把debug和定位的方法和原理都告诉大家了，祝大好运！看起来好了，再试试编译。",
                "hasOriginal": true,
                "diggCount": 2,
                "commentCount": 4,
                "postTime": 1737533367000,
                "createTime": 1737529637000,
                "updateTime": 1737601099000,
                "url": "https://blog.csdn.net/aerror/article/details/145304045",
                "articleType": 1,
                "viewCount": 711,
                "picList": [
                    "https://i-blog.csdnimg.cn/blog_migrate/tags/6c820fa0b7902309f0622e7fd3a773c8.png"
                ],
                "editUrl": "https://mp.csdn.net/console/editor/html/145304045",
                "collectCount": 1,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2025.01.22",
                "title": "强制让cmake使用指定编译器如某个版本的gcc 和g++",
                "description": "可以定义CC和CXX ,不过还是使用cmake本身的宏定义比较好。",
                "hasOriginal": true,
                "diggCount": 3,
                "commentCount": 0,
                "postTime": 1737442446000,
                "createTime": 1737442446000,
                "updateTime": 1737511449000,
                "url": "https://blog.csdn.net/aerror/article/details/145283786",
                "articleType": 1,
                "viewCount": 250,
                "picList": [
                    "https://i-blog.csdnimg.cn/blog_migrate/tags/6c820fa0b7902309f0622e7fd3a773c8.png"
                ],
                "editUrl": "https://mp.csdn.net/console/editor/html/145283786",
                "collectCount": 0,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2025.01.18",
                "title": "STM32G031G6和STM32F031G6是两个型号，别弄错了啊！",
                "description": "没有道理啊，查文档，对针针脚，查了STM32F031G6的。决定焊第二张，就留ｍｃｕ最简线路，又是一样，没有反应。９．难道ｍｃｕ坏的，焊第三张样板，就留ｍｃｕ最简线路，又是一样，没有反应。买的是STM32G031G6，画图画的是STM32F031G6。１．EDA选了STM32F031G6，画图，４层板，画得我眼都花了，14.我又看了一眼电路原理图，看了一下mcu上的丝标，呃。７．发现没有反应，以来没有焊好，补焊一轮，检查连通性，无果。４．终于等到，开工贴双面，眼又花了，花了数个小时。11.好吧，睡觉。",
                "hasOriginal": true,
                "diggCount": 2,
                "commentCount": 0,
                "postTime": 1737175675000,
                "createTime": 1737174779000,
                "updateTime": 1737177705000,
                "url": "https://blog.csdn.net/aerror/article/details/145225440",
                "articleType": 1,
                "viewCount": 251,
                "picList": [
                    "https://i-blog.csdnimg.cn/blog_migrate/tags/71e05144a4f62a37d7dd57a628cb1961.png"
                ],
                "editUrl": "https://mp.csdn.net/console/editor/html/145225440",
                "collectCount": 0,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2025.01.14",
                "title": "IL2CPPDumper符号导入IDA的set_name错误解决",
                "description": "结果，原来是我使用ida使用ida_py3.py是不行了，然后ida.py就好了。看来是python的版本问题。python 版本确实乱。乱到要出一个pyenv管理, anaconda, 很是奇怪的语言。把il2cpp的生成的符号信息导入ida中会有出现以下错误；调了半天，还改了ida_name.py，以为是可变参数问题。这个直接单独执行没有问题。",
                "hasOriginal": true,
                "diggCount": 1,
                "commentCount": 0,
                "postTime": 1736838471000,
                "createTime": 1736739406000,
                "updateTime": 1736839013000,
                "url": "https://blog.csdn.net/aerror/article/details/145111741",
                "articleType": 1,
                "viewCount": 380,
                "picList": [
                    "https://i-blog.csdnimg.cn/blog_migrate/tags/bbaff8dbfaf95ad97389389d60465603.png"
                ],
                "editUrl": "https://mp.csdn.net/console/editor/html/145111741",
                "collectCount": 1,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2025.01.14",
                "title": "Frida调试il2cpp的程序打印原生c#对象为json",
                "description": "需要配合il2cpp原来程序里的一些json序列化的工具来进行，一般都可以找到，如下面的。MiniJSON.Json，像这个 Serialize到运行时对象就不行了。主要的思路是，输入一个对象，那么使用反射的GetType,  然后使用type的GetFields， 拿到Field的列表，然后遍历field列表。Field是一个抽象类的，这里我使用 RuntimeFieldInfo : RtFieldInfo里面的函数来实现。",
                "hasOriginal": true,
                "diggCount": 2,
                "commentCount": 0,
                "postTime": 1736838115000,
                "createTime": 1736837924000,
                "updateTime": 1736838540000,
                "url": "https://blog.csdn.net/aerror/article/details/145139535",
                "articleType": 1,
                "viewCount": 423,
                "picList": [
                    "https://i-blog.csdnimg.cn/blog_migrate/tags/db3787141d668b1b21ce6510b847fa3b.png"
                ],
                "editUrl": "https://mp.csdn.net/console/editor/html/145139535",
                "collectCount": 1,
                "rtype": "article"
            },
            {
                "type": "video",
                "formatTime": "2025.01.13",
                "title": "Flashing firmware ELRS WIFI",
                "description": "Flashing firmware ELRS WIFI",
                "cover": "https://v-blog.csdnimg.cn/asset/ac4534c20ce910b1fa9aed887a19e0aa/cover/Cover0.jpg",
                "createTime": 1736756344165,
                "url": "https://live.csdn.net/v/443145",
                "rtype": "blog"
            },
            {
                "type": "blog",
                "formatTime": "2025.01.12",
                "title": "使用命令行打开CygWin/mintty登录环境变量，并转到对应路径",
                "description": "对于使用sublime text，我在当前编辑所在的文件的路径下打开一个cygwin的命行令窗口，进行命令行操作，这样就很方便了，直接打开，不用再自己cd到当前目录。上一篇使用oldpwd来转目录，也可解决问题，但是其实mintty有一个隐藏的--dir的参数，启动的时候指定即可，发文记录一下。这个打一个cygwin的窗口，登录/bin/sh ，初始化环境变量后，会cd的%cd%这个当前目录。",
                "hasOriginal": true,
                "diggCount": 3,
                "commentCount": 0,
                "postTime": 1736670100000,
                "createTime": 1736669927000,
                "updateTime": 1736670100000,
                "url": "https://blog.csdn.net/aerror/article/details/145094367",
                "articleType": 1,
                "viewCount": 257,
                "picList": [
                    "https://i-blog.csdnimg.cn/blog_migrate/tags/6c820fa0b7902309f0622e7fd3a773c8.png"
                ],
                "editUrl": "https://mp.csdn.net/console/editor/html/145094367",
                "collectCount": 0,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2025.01.02",
                "title": "分享一个C语言写的自动递归创建多层级目录的mkdir",
                "description": "效果就是和mkdir -p 一样了。使用标准的c语言库，可以跨平台使用。",
                "hasOriginal": true,
                "diggCount": 2,
                "commentCount": 0,
                "postTime": 1735794702000,
                "createTime": 1735794677000,
                "updateTime": 1735794736000,
                "url": "https://blog.csdn.net/aerror/article/details/144884121",
                "articleType": 1,
                "viewCount": 180,
                "picList": [
                    "https://i-blog.csdnimg.cn/blog_migrate/tags/e8ea92f580f30873eef61616bc0e4bf2.png"
                ],
                "editUrl": "https://mp.csdn.net/console/editor/html/144884121",
                "collectCount": 0,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2025.01.01",
                "title": "如何使用Sublime Text3和Keil uVision ５协同进行单片机开发",
                "description": "本来一向使用SDCC,后来发现同一套代码工程Keil编译出来的代码小20%左右。但是Keil的IDE和编辑器相当难用，看着极不顺眼。后来发现VScode可以调用Keil来编译。我研究一下了，发现也是可行的。3. 需要安装cywin,然后在sublime上使用我上编文章的cywinmake的buildsystem。4. ctrl+b就可以使用keil来编译了。",
                "hasOriginal": true,
                "diggCount": 3,
                "commentCount": 0,
                "postTime": 1735707672000,
                "createTime": 1735707280000,
                "updateTime": 1735708246000,
                "url": "https://blog.csdn.net/aerror/article/details/144866072",
                "articleType": 1,
                "viewCount": 289,
                "picList": [
                    "https://i-blog.csdnimg.cn/blog_migrate/tags/28442baf755a43a06d31c3a2cc43a265.png"
                ],
                "editUrl": "https://mp.csdn.net/console/editor/html/144866072",
                "collectCount": 0,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2025.01.01",
                "title": "windows 下如何在sublime Text调用cywin终端，然后执行make进行编译代码",
                "description": "找到cywin的安装目录找到mintty.exe, sublime的菜单Tools新一个buildSysteｍ，回到工作目录，选择这个cywinmake为buildsystem,如上图。填写以上内容，然后保存为cywinmake.sublime-build。sublime会帮你新建个文件叫 ＊ｓｕｂｌｉｍｅ－ｂｕｉｌｄ。ctrl+B就可以编译了。",
                "hasOriginal": true,
                "diggCount": 2,
                "commentCount": 0,
                "postTime": 1735706599000,
                "createTime": 1735706205000,
                "updateTime": 1735706901000,
                "url": "https://blog.csdn.net/aerror/article/details/144865802",
                "articleType": 1,
                "viewCount": 204,
                "picList": [
                    "https://i-blog.csdnimg.cn/direct/7a7d059196964bf18691913a46d63388.png"
                ],
                "editUrl": "https://mp.csdn.net/console/editor/html/144865802",
                "collectCount": 0,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2024.12.31",
                "title": "要快速找到 A, B, C 使得 A×B×Cx4/13 最接近 D",
                "description": "A取值范围 为(64, 128, 256,1024),B为（1-255），C为（1-256）D的取值范围是[0,66846720]",
                "hasOriginal": true,
                "diggCount": 6,
                "commentCount": 0,
                "postTime": 1735543882000,
                "createTime": 1735542889000,
                "updateTime": 1735620679000,
                "url": "https://blog.csdn.net/aerror/article/details/144826960",
                "articleType": 1,
                "viewCount": 398,
                "picList": [
                    "https://i-blog.csdnimg.cn/blog_migrate/tags/671f42ab07fd990f949a1c903140dd83.png"
                ],
                "editUrl": "https://mp.csdn.net/console/editor/html/144826960",
                "collectCount": 5,
                "rtype": "article"
            }
        ],
        "total": null
    }
}



{
    "code": 200,
    "message": "success",
    "traceId": "cf124006-2e0c-4336-a21c-9ed668b9fbcb",
    "data": {
        "list": [
            {
                "type": "blog",
                "formatTime": "2024.12.29",
                "title": "计算intel hex文件占用空间大小",
                "description": "只是需要使用sdcc的make的时候，最后打印一下hex文件占用flash的大小和百分比，试了srec_info ， python 的intelhex等，好像都不是需要的。没有办法，只好自己使用shell脚本写一个。保存为showsize.sh,使用例子如下。",
                "hasOriginal": true,
                "diggCount": 1,
                "commentCount": 0,
                "postTime": 1735461192000,
                "createTime": 1735461160000,
                "updateTime": 1735461193000,
                "url": "https://blog.csdn.net/aerror/article/details/144806630",
                "articleType": 1,
                "viewCount": 145,
                "picList": [
                    "https://i-blog.csdnimg.cn/blog_migrate/tags/db3787141d668b1b21ce6510b847fa3b.png"
                ],
                "editUrl": "https://mp.csdn.net/console/editor/html/144806630",
                "collectCount": 0,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2024.12.26",
                "title": "使用命令行来刷写ELRS接收器的固件",
                "description": "使用ExpressLRS Configurator的自带编译好的python命令。",
                "hasOriginal": true,
                "diggCount": 2,
                "commentCount": 0,
                "postTime": 1732896274000,
                "createTime": 1732896252000,
                "updateTime": 1735226733000,
                "url": "https://blog.csdn.net/aerror/article/details/144148289",
                "articleType": 1,
                "viewCount": 527,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/144148289",
                "collectCount": 1,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2024.12.26",
                "title": "Frida转指针类型强转成float",
                "description": "2.使用内存读写来转，速度应该感觉快些。",
                "hasOriginal": true,
                "diggCount": 2,
                "commentCount": 2,
                "postTime": 1735199324000,
                "createTime": 1735199139000,
                "updateTime": 1735199686000,
                "url": "https://blog.csdn.net/aerror/article/details/144746402",
                "articleType": 1,
                "viewCount": 201,
                "picList": [
                    "https://i-blog.csdnimg.cn/direct/044b1d7840364d038b048e658ff0845c.png"
                ],
                "editUrl": "https://mp.csdn.net/console/editor/html/144746402",
                "collectCount": 0,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2024.12.23",
                "title": "arm64 取一个32位数除以10的余数计算",
                "description": "【代码】arm64 取一个32位数除以10的余数计算。",
                "hasOriginal": true,
                "diggCount": 2,
                "commentCount": 0,
                "postTime": 1734933269000,
                "createTime": 1734933214000,
                "updateTime": 1734933317000,
                "url": "https://blog.csdn.net/aerror/article/details/144664395",
                "articleType": 1,
                "viewCount": 146,
                "picList": [
                    "https://i-blog.csdnimg.cn/blog_migrate/tags/8a4bfa4a5d53ce03efff2abd920b6ca4.png"
                ],
                "editUrl": "https://mp.csdn.net/console/editor/html/144664395",
                "collectCount": 0,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2024.12.23",
                "title": "VC2008/2005工程自动生成器",
                "description": "我很喜欢使用VS2008的IDE环境,但是很多源代码都没有可以用于Visual studio IDE的工程文件,例如DDK的示例代码.于是我写了下面的工具,功能如下:1.扫描指定目录并递归其子目录的所有文件,生成一个xml的VCMakeTool类型的工程文件.使用方法：usage:  buildvcprojdirdestfilename",
                "hasOriginal": true,
                "diggCount": 0,
                "commentCount": 1,
                "postTime": 1226327580000,
                "createTime": 1226327580000,
                "updateTime": 1734918934000,
                "url": "https://blog.csdn.net/aerror/article/details/3269685",
                "articleType": 1,
                "viewCount": 8897,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/3269685",
                "collectCount": 0,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2024.12.11",
                "title": "Frida如何获取Vector3(3个float)结构体的返回值",
                "description": "经过我多次尝试和想像，我发现是这可以这样获取的，就是使用replace, 然后返回值定义成一个结构体的数组。在frida的文档里，没有任何描述如何获取这样的返回值。这个也是没有人可以回答。",
                "hasOriginal": true,
                "diggCount": 1,
                "commentCount": 0,
                "postTime": 1727071177000,
                "createTime": 1727070765000,
                "updateTime": 1733898452000,
                "url": "https://blog.csdn.net/aerror/article/details/142456376",
                "articleType": 1,
                "viewCount": 288,
                "picList": [
                    "https://i-blog.csdnimg.cn/direct/44d6a5ed3edc4c9e90af73617cfffc33.png"
                ],
                "editUrl": "https://mp.csdn.net/console/editor/html/142456376",
                "collectCount": 0,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2024.12.09",
                "title": "推荐一个好用的lua反编译工具",
                "description": "https://github.com/Aussiemon/ljd/",
                "hasOriginal": true,
                "diggCount": 2,
                "commentCount": 0,
                "postTime": 1733389713000,
                "createTime": 1733389713000,
                "updateTime": 1733715190000,
                "url": "https://blog.csdn.net/aerror/article/details/144271470",
                "articleType": 1,
                "viewCount": 319,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/144271470",
                "collectCount": 0,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2024.11.26",
                "title": "编译lz4-java",
                "description": "这个项目上一个版本是2021年了，好久没有人维护了，我们需要升级一个lz4的到1.10.0, 以提升性能速度.1.下载ant1.10.15 ， 解压后，设path的bin下面，java安装1.8以上。3. 更新lz4的子模块。",
                "hasOriginal": true,
                "diggCount": 2,
                "commentCount": 0,
                "postTime": 1732605480000,
                "createTime": 1732603703000,
                "updateTime": 1732605480000,
                "url": "https://blog.csdn.net/aerror/article/details/144058969",
                "articleType": 1,
                "viewCount": 312,
                "picList": [
                    "https://i-blog.csdnimg.cn/blog_migrate/cover/db3787141d668b1b21ce6510b847fa3b.png"
                ],
                "editUrl": "https://mp.csdn.net/console/editor/html/144058969",
                "collectCount": 0,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2024.11.16",
                "title": "如何使用gdb动态调试pyhon程序",
                "description": "但凡安装了python，安装目录下都有一个, 不知道在什么地方可以find一下，然后source一下，或者加下.gdbinit里面。然后就可以使用py开头的命令了，如py-bt。然后gdb -p pid。",
                "hasOriginal": true,
                "diggCount": 2,
                "commentCount": 0,
                "postTime": 1731661733000,
                "createTime": 1731661630000,
                "updateTime": 1731720896000,
                "url": "https://blog.csdn.net/aerror/article/details/143803487",
                "articleType": 1,
                "viewCount": 272,
                "picList": [
                    "https://i-blog.csdnimg.cn/blog_migrate/cover/451bd3cb0200ebe9bda02f699c8b39d1.png"
                ],
                "editUrl": "https://mp.csdn.net/console/editor/html/143803487",
                "collectCount": 0,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2024.10.31",
                "title": "GDB像xxd一样查看内存数据",
                "description": "希望可以像xxd一样，分两栏，左右是16进制，右边是ascii的字符串，自定义一个命令即可，如下。",
                "hasOriginal": true,
                "diggCount": 3,
                "commentCount": 0,
                "postTime": 1730361708000,
                "createTime": 1730361692000,
                "updateTime": 1730361709000,
                "url": "https://blog.csdn.net/aerror/article/details/143403930",
                "articleType": 1,
                "viewCount": 200,
                "picList": [
                    "https://i-blog.csdnimg.cn/blog_migrate/cover/8a4bfa4a5d53ce03efff2abd920b6ca4.png"
                ],
                "editUrl": "https://mp.csdn.net/console/editor/html/143403930",
                "collectCount": 0,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2024.10.30",
                "title": "MacOS如何读取磁盘原始的扇区内容，恢复误删除的数据",
                "description": "按上面的原理，我们可以使用代码来一个一个扇区的查找我们丢失数据。我丢了一个android的签名keystore, 用遍了网上的工具都没有找到。我自己写了一个搜索扇区程序，尝试去恢复这个文件。这个就是读取 /dev/disk2这个磁盘每100这个sector, bs表示扇区大小是512.先使用diskutil list找到这磁盘的挂载。你需要把这个磁盘umount下来。然后umount它的挂载。",
                "hasOriginal": true,
                "diggCount": 2,
                "commentCount": 0,
                "postTime": 1730270467000,
                "createTime": 1730268109000,
                "updateTime": 1730275284000,
                "url": "https://blog.csdn.net/aerror/article/details/143363500",
                "articleType": 1,
                "viewCount": 571,
                "picList": [
                    "https://i-blog.csdnimg.cn/blog_migrate/cover/e658252d918e15d0df73656bca64a96f.png"
                ],
                "editUrl": "https://mp.csdn.net/console/editor/html/143363500",
                "collectCount": 0,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2024.10.30",
                "title": "如何在windows下编译UEFITOOL",
                "description": "UEFITOOL 编译",
                "hasOriginal": true,
                "diggCount": 0,
                "commentCount": 0,
                "postTime": 1659167564000,
                "createTime": 1659100213000,
                "updateTime": 1730249970000,
                "url": "https://blog.csdn.net/aerror/article/details/126064047",
                "articleType": 1,
                "viewCount": 984,
                "picList": [
                    "https://i-blog.csdnimg.cn/blog_migrate/cover/c3a921c902eccb7cedaa111df630a7a8.png"
                ],
                "editUrl": "https://mp.csdn.net/console/editor/html/126064047",
                "collectCount": 1,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2024.10.22",
                "title": "Arduino 1.8 无法启动，闪屏过后，卡死，不出主界面解决方案",
                "description": "6.折腾了好久，我觉得可能是arduino ide2.x安装一些东西，而arduino 1.8.9也使用了这些东西，导致问题。7. 最后在C:\\Users\\youuser\\appdata\\Local找到两个ariduino开头的文件夹，有一个文件夹很大，先多东西，把他们都删除了，发现问题解决！4.发现安装了arduino ide2.x， 顺便卸载了，然后再重新安装Arduino 1.8.9，也是一直的现象, 无效。突然打不开了，闪屏过后，不出主界面，一直这样，任务栏有图标。",
                "hasOriginal": true,
                "diggCount": 3,
                "commentCount": 0,
                "postTime": 1729341242000,
                "createTime": 1729339929000,
                "updateTime": 1729559145000,
                "url": "https://blog.csdn.net/aerror/article/details/143083474",
                "articleType": 1,
                "viewCount": 617,
                "picList": [
                    "https://i-blog.csdnimg.cn/blog_migrate/cover/28442baf755a43a06d31c3a2cc43a265.png"
                ],
                "editUrl": "https://mp.csdn.net/console/editor/html/143083474",
                "collectCount": 1,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2024.09.10",
                "title": "USB HID 协议实现详解",
                "description": "但是请求的时候，往往比较当前说明的长，这个没有像之前那先尝试再请求，这里代码直接取两者最小返回即可。要是有多个接口（复合型的设备），IDX就是多个报告的下标索引。bmRequest  =  80  -D7 == 方向是设备至主机？wIndex =  00 00 当有多个hid设备，此为下标索引。wValue == 00 01 , 根据表5， 1 为设备描述符。wLenght 09 00    第一次 请求 09 字节，根据report定义，定时或触发性发送数据。收到 9 字节，数据结构如表8，知道长度。",
                "hasOriginal": true,
                "diggCount": 7,
                "commentCount": 0,
                "postTime": 1724598826000,
                "createTime": 1724423413000,
                "updateTime": 1725949624000,
                "url": "https://blog.csdn.net/aerror/article/details/141475999",
                "articleType": 1,
                "viewCount": 1850,
                "picList": [
                    "https://i-blog.csdnimg.cn/direct/6b3e8a3ac1ce4f8393417d0cac3f43c2.png"
                ],
                "editUrl": "https://mp.csdn.net/console/editor/html/141475999",
                "collectCount": 16,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2024.09.05",
                "title": "小米poco x3 pro adbd 以root权限启动提供服务",
                "description": "8. 在mout的目录下的apex/com.android.adbd，找到adbd,复制出来，上传到手机的/data/local, 并加上执行权限。4. fastboot flash recoery   twrp-3.7.1_12-0-vayu.img, 安装magisk, termux。6. 解压aosp_arm64-img-11718355.zip, 把system.img转成ext2,9.下载system_properties_arm64，上传到/data/local,并加上执行权限，",
                "hasOriginal": true,
                "diggCount": 3,
                "commentCount": 0,
                "postTime": 1715307028000,
                "createTime": 1715305822000,
                "updateTime": 1725526883000,
                "url": "https://blog.csdn.net/aerror/article/details/138650931",
                "articleType": 1,
                "viewCount": 11048,
                "picList": [
                    "https://i-blog.csdnimg.cn/blog_migrate/cover/451bd3cb0200ebe9bda02f699c8b39d1.png"
                ],
                "editUrl": "https://mp.csdn.net/console/editor/html/138650931",
                "collectCount": 3,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2024.08.25",
                "title": "STM32F0XX TIM1 CH2 INPUT CAPTURE 输入捕获PPM信号",
                "description": "按文档的例子和其它例子都很少使用timer1的，不知道为什么，但是我想使用它，方便端口重用，我一开始使用tim1 ch3,死活不工作，搞了几天，没有办法换了一个ch2， 结果同样的代码就工作了。不知道为什么，希望看到的高手告知。（使用f103，timer1 的ch3同样的代码也没有问题。分享PPM的代码如下，是捕捉航模的PPM信号。",
                "hasOriginal": true,
                "diggCount": 3,
                "commentCount": 0,
                "postTime": 1723966617000,
                "createTime": 1723966506000,
                "updateTime": 1724598262000,
                "url": "https://blog.csdn.net/aerror/article/details/141300619",
                "articleType": 1,
                "viewCount": 318,
                "picList": [
                    "https://i-blog.csdnimg.cn/blog_migrate/cover/28442baf755a43a06d31c3a2cc43a265.png"
                ],
                "editUrl": "https://mp.csdn.net/console/editor/html/141300619",
                "collectCount": 0,
                "rtype": "article"
            },
            {
                "type": "download",
                "formatTime": "2020.04.28",
                "title": "MachORuntime.pdf",
                "description": "Mach-O 文件格式，用于ios/macos的可执行文件的格式，官方的文档，原来有developer可以下载，现在不行了，顾上传到这，给有需要的人.",
                "fileType": "pdf",
                "createTime": 1588043694000,
                "url": "https://download.csdn.net/download/aerror/12368810",
                "rtype": "file"
            },
            {
                "type": "blog",
                "formatTime": "2024.07.02",
                "title": "当今最流行的推荐引擎算法有哪些？",
                "description": "但事实上，推荐数据集与通常的计算机视觉数据集有很大不同，这使得使用现有的实现和工具变得更加复杂（例如，TensorFlow 或 PyTorch 等库中的许多优化器不支持稀疏更新动量，这是训练推荐深度模型的基石）。要训练解决项目冷启动（或用户冷启动）的模型，您需要一个数据集，其中包括项目（或用户的）的详细描述，例如电影的类型、预算、持续时间或任何可能有助于推荐的变量。由于推荐是使用用户对商品的反馈数据集计算得出的，因此它们无法推荐没有（或只有少量）反馈的商品，例如新商品。让我们看看每种方法的优点和缺点。",
                "hasOriginal": false,
                "diggCount": 0,
                "commentCount": 1,
                "postTime": 1719909500000,
                "createTime": 1719909400000,
                "updateTime": 1719909512000,
                "url": "https://blog.csdn.net/aerror/article/details/140130616",
                "articleType": 4,
                "viewCount": 306,
                "picList": [
                    "https://i-blog.csdnimg.cn/blog_migrate/cover/c245f41073507966b40ac570fe861b54.png"
                ],
                "editUrl": "https://mp.csdn.net/console/editor/html/140130616",
                "collectCount": 1,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2024.06.21",
                "title": "MACOS VMWare Fusion无法将“Ethernet0”连接到虚拟网络“/dev/vmnet8”",
                "description": "以为是vmware的，使用上面的命令把vmnet都停了，发现还在。ifconfig 看了一下，发信息多了一个bridge..到 系统偏好设置->共享->互联网共享 这个关掉。各项服务启动也是正常的，但是就是vm没有网络了。想了半天，原来是在wifi上打开了共享互联网。记录一下，备忘和帮忙遇到同样问题的人。一直好端端的，突然打开vm提示这个。启动vmware的那堆服务器。再打开vm， 发现不提示。查了一下，应该是网络有关。这个bridge不见了。开机vm的网络也正常了。",
                "hasOriginal": true,
                "diggCount": 5,
                "commentCount": 0,
                "postTime": 1718947104000,
                "createTime": 1718946811000,
                "updateTime": 1718947105000,
                "url": "https://blog.csdn.net/aerror/article/details/139858406",
                "articleType": 1,
                "viewCount": 1304,
                "picList": [
                    "https://i-blog.csdnimg.cn/blog_migrate/cover/e658252d918e15d0df73656bca64a96f.png"
                ],
                "editUrl": "https://mp.csdn.net/console/editor/html/139858406",
                "collectCount": 0,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2024.05.30",
                "title": "android root了之后， jdb任何app",
                "description": "设置 ro.debuggable， 那么全部app都是可以debuggable的，不需要修改manifest.",
                "hasOriginal": true,
                "diggCount": 0,
                "commentCount": 0,
                "postTime": 1614940579000,
                "createTime": 1614940579000,
                "updateTime": 1717059294000,
                "url": "https://blog.csdn.net/aerror/article/details/114407774",
                "articleType": 1,
                "viewCount": 403,
                "picList": [
                    "https://i-blog.csdnimg.cn/blog_migrate/cover/b15c6791119fa1bec4afe2397d081db0.png"
                ],
                "editUrl": "https://mp.csdn.net/console/editor/html/114407774",
                "collectCount": 0,
                "rtype": "article"
            }
        ],
        "total": null
    }
}


{
    "code": 200,
    "message": "success",
    "traceId": "4e9435c7-6e34-45b8-94f7-65b8e50adc30",
    "data": {
        "list": [
            {
                "type": "blog",
                "formatTime": "2024.03.22",
                "title": "如何grep excel文件，在excel文件查找到字符串",
                "description": "当我们遇到一堆excel文件，我们想通过关键字去定位一下它在那些excel文件中存在，怎么办？直接grep是肯定不行的。1. 安装 xls2txt或xlsx2csv，把excel转txt再用grep。2. 安装xlsxgrep。",
                "hasOriginal": true,
                "diggCount": 1,
                "commentCount": 0,
                "postTime": 1711076869000,
                "createTime": 1711076815000,
                "updateTime": 1711076899000,
                "url": "https://blog.csdn.net/aerror/article/details/136935072",
                "articleType": 1,
                "viewCount": 459,
                "picList": [
                    "https://i-blog.csdnimg.cn/blog_migrate/cover/a3f44b02e67d2b4f6bea142cd967f1a3.png"
                ],
                "editUrl": "https://mp.csdn.net/console/editor/html/136935072",
                "collectCount": 0,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2024.03.01",
                "title": "开源BLHELI-S 代码详细解读(五）",
                "description": "总体思想是根据电机运行状态计算前4次换相时间，然后根据前4次换相时间计算15度和7.5度电角度时间，换相之后延时7.5度电角度开始检测过零点，检测到过零点后延时15度电角度进行换相。我们继续来看calc_next_comm_timing, 每次操作完换相之后，这里都会调用，同时会设置timer3去等advance timing.",
                "hasOriginal": true,
                "diggCount": 2,
                "commentCount": 4,
                "postTime": 1709270913000,
                "createTime": 1709117567000,
                "updateTime": 1709281442000,
                "url": "https://blog.csdn.net/aerror/article/details/136353455",
                "articleType": 1,
                "viewCount": 612,
                "picList": [
                    "https://i-blog.csdnimg.cn/blog_migrate/cover/28442baf755a43a06d31c3a2cc43a265.png"
                ],
                "editUrl": "https://mp.csdn.net/console/editor/html/136353455",
                "collectCount": 2,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2024.03.01",
                "title": "开源BLHELI-S 代码详细解读(四）",
                "description": "如Set_Pwm_C，   P1SKIP =  37h(00110111b), 即P1.3 P1.6和 P1.7会给外设使用，  根据优先度，PCA0的CEX0会使用P1.3(CpwmFET)输出 CEX1 会在P1.6(CcomFET)输出。这个 wait_before_zc_scan，其实比较简单，就是从把timer3的超时设置为Comm_Period4x_L和Comm_Period4x_H, 只有在STARTUP_PHASE和 SHL INITIAL_RUN_PHASE阶段才会设置。",
                "hasOriginal": true,
                "diggCount": 6,
                "commentCount": 0,
                "postTime": 1708397767000,
                "createTime": 1707221238000,
                "updateTime": 1709270899000,
                "url": "https://blog.csdn.net/aerror/article/details/136061806",
                "articleType": 1,
                "viewCount": 965,
                "picList": [
                    "https://i-blog.csdnimg.cn/blog_migrate/cover/28442baf755a43a06d31c3a2cc43a265.png"
                ],
                "editUrl": "https://mp.csdn.net/console/editor/html/136061806",
                "collectCount": 11,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2024.02.28",
                "title": "开源BLHELI-S 代码详细解读(三）",
                "description": "如果不满足，则跳到run_to_wait_for_power_on_fail，这里上一篇有详细读了，是一些失败的检查，最坏会跳回init_no_signal。B. 否则就是在启动的阶段（STARTUP_PHASE），这里会将Startup_Zc_Timeout_Cntd减1(超时次数，wait_before_zc_scan会把它设置成2)，要是它还不是0，就跳到comp_check_timeout_extend_timeout,再调用setup_zc_scan_timeout。",
                "hasOriginal": true,
                "diggCount": 22,
                "commentCount": 3,
                "postTime": 1707219416000,
                "createTime": 1707040592000,
                "updateTime": 1709088561000,
                "url": "https://blog.csdn.net/aerror/article/details/136030320",
                "articleType": 1,
                "viewCount": 1252,
                "picList": [
                    "https://i-blog.csdnimg.cn/blog_migrate/cover/6b859b3f626db9c64f97c48293b82211.png"
                ],
                "editUrl": "https://mp.csdn.net/console/editor/html/136030320",
                "collectCount": 12,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2024.02.28",
                "title": "开源BLHELI-S 代码详细解读(二）",
                "description": "DIR_CHANGE_BRAKE没有设置的话，就跳到run_to_wait_for_power_on，不是的话，清除DIR_CHANGE_BRAKE的标志，清除PGM_DIR_REV标志，要是RCP_DIR_REV有设置，那么设置PGM_DIR_REV，然后把当前的阶段设置回INITIAL_RUN_PHASE。run_to_wait_for_power_on_fail是由前面的wait_for_comp_out_low和wait_for_comp_out_high的异常读取触发的。",
                "hasOriginal": true,
                "diggCount": 24,
                "commentCount": 4,
                "postTime": 1707038894000,
                "createTime": 1706576810000,
                "updateTime": 1709088086000,
                "url": "https://blog.csdn.net/aerror/article/details/135925136",
                "articleType": 1,
                "viewCount": 2566,
                "picList": [
                    "https://i-blog.csdnimg.cn/blog_migrate/cover/5fbe5c9a62364bdd8b20b324d539762a.png"
                ],
                "editUrl": "https://mp.csdn.net/console/editor/html/135925136",
                "collectCount": 24,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2024.02.27",
                "title": "如何编译BLHELI 及BLHELI_S",
                "description": "开头改成SilabsPath和 RaisonancePath你安装所在路径。BLHELI_S目录下，修改一下MakeHesfiles.bat。3. BLHeli目录下修改MakeHesfiles.bat。开头，改成KeilPath你安装 的目录。就可以双击编译BLHELI_S了。下载Ride和RKit-51。就可以双击编译BLHELI了。这里只说silab的两个版本。",
                "hasOriginal": true,
                "diggCount": 3,
                "commentCount": 4,
                "postTime": 1709049525000,
                "createTime": 1709049058000,
                "updateTime": 1709049529000,
                "url": "https://blog.csdn.net/aerror/article/details/136334495",
                "articleType": 1,
                "viewCount": 619,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/136334495",
                "collectCount": 4,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2024.02.06",
                "title": "开源BLHELI-S 代码详细解读(一）",
                "description": "Pgm_Beacon_Delay会和Power_On_Wait_Cnt_H相减，要是借位，就会开始beep f4, beep一次Power_On_Wait_Cnt_H会减1，就是Power_On_Wait_Cnt_L是255的时候beep一次了。如果有信号（Rcp_Timeout_Cntd不是零），同时New_Rcp(油门)不是零跳到 wait_for_power_on_nonzero， 再检查一次Rcp_Timeout_Cntd是不是零，要是不是零，那就跳到init_start。这个代码在inc里。",
                "hasOriginal": true,
                "diggCount": 26,
                "commentCount": 6,
                "postTime": 1706514744000,
                "createTime": 1706338268000,
                "updateTime": 1707184523000,
                "url": "https://blog.csdn.net/aerror/article/details/135883072",
                "articleType": 1,
                "viewCount": 3168,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/135883072",
                "collectCount": 45,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2024.01.18",
                "title": "GDB 调用无符号的任意函数",
                "description": "我们知道有符号的函数调用很简单了，直接像写c语言一样传参调用即可。但是无符号的就不知道怎么弄了，查遍了整个网络我都没有查到怎么做。5. until命令执行完成，说明函数也执行完成了，因为是返回地址设置了。1. 保存好所有的现场，如寄存器，当前pc,  返回地址，堆栈等。例子是调用一个对象转json的无符号函数，然后打印它返回的结果。6. 如果有需要打印一些结果，如p/x x0.4. 使用until 命令到执行到的返回地址。2. 替换返回地址，为当前指令下一个地址。3. 设置pc去执行函数，",
                "hasOriginal": true,
                "diggCount": 6,
                "commentCount": 0,
                "postTime": 1705555110000,
                "createTime": 1705554780000,
                "updateTime": 1705558094000,
                "url": "https://blog.csdn.net/aerror/article/details/135671769",
                "articleType": 1,
                "viewCount": 595,
                "picList": [
                    "https://i-blog.csdnimg.cn/blog_migrate/cover/9135a2d9ba113b74b25eef58f55a9697.png"
                ],
                "editUrl": "https://mp.csdn.net/console/editor/html/135671769",
                "collectCount": 11,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2024.01.18",
                "title": "使用GDB动态补丁ARM64的程序 跳转到任意地址",
                "description": "正常的 arm64跳转转令B,BL,BLX只有+-128M, 我们很多时候要跳到大于这个值的地址。我们在arm64下可以选的指令就只有br指令了。原来在ARM/Thumb中使用的 ldr pc, [pc, #?] ， 但arm64是不能这样了。但是它也需要给一个寄存器赋值一个64bit的地址， 可是arm的指令是固定的32bit的，即使给一个寄存器赋值一个64bit的值都麻烦。如 set *(int*)0xabc1234 = 0x58000070。补丁就是简单了，就是直接使用set命令就好了。",
                "hasOriginal": true,
                "diggCount": 7,
                "commentCount": 0,
                "postTime": 1705556698000,
                "createTime": 1705555398000,
                "updateTime": 1705556743000,
                "url": "https://blog.csdn.net/aerror/article/details/135671929",
                "articleType": 1,
                "viewCount": 683,
                "picList": [
                    "https://i-blog.csdnimg.cn/blog_migrate/cover/451bd3cb0200ebe9bda02f699c8b39d1.png"
                ],
                "editUrl": "https://mp.csdn.net/console/editor/html/135671929",
                "collectCount": 10,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2024.01.17",
                "title": "LUA 对象转excel",
                "description": "因为是excel, 所以第一层要是数组，否则没有什么意义，这里使用开源的json.lua， 但是开源的，对于数字作下标的，或者是一个数组里，不意类型的key混合的情况无法转换，所以先进行了扫描判断是不是混合的key. 是的话，取消key,把key到结构里作为一个字段处理。",
                "hasOriginal": true,
                "diggCount": 11,
                "commentCount": 0,
                "postTime": 1705454323000,
                "createTime": 1705453486000,
                "updateTime": 1705460958000,
                "url": "https://blog.csdn.net/aerror/article/details/135640545",
                "articleType": 1,
                "viewCount": 1105,
                "picList": [
                    "https://i-blog.csdnimg.cn/blog_migrate/cover/c9c219e8c8e420cf8fea55aafeda5335.png"
                ],
                "editUrl": "https://mp.csdn.net/console/editor/html/135640545",
                "collectCount": 9,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2024.01.11",
                "title": "JS 解析RGB控制台终端输出有颜色的LOG",
                "description": "RGB转consolecolor是自己了随便写的，差不多就算了。可以解析一下html的颜色输出log, 在终端打印成相近的颜色。",
                "hasOriginal": true,
                "diggCount": 7,
                "commentCount": 0,
                "postTime": 1704966983000,
                "createTime": 1704966983000,
                "updateTime": 1704967040000,
                "url": "https://blog.csdn.net/aerror/article/details/135535813",
                "articleType": 1,
                "viewCount": 494,
                "picList": [
                    "https://i-blog.csdnimg.cn/blog_migrate/cover/8a4bfa4a5d53ce03efff2abd920b6ca4.png"
                ],
                "editUrl": "https://mp.csdn.net/console/editor/html/135535813",
                "collectCount": 7,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2024.01.10",
                "title": "FRIDA 调用原生函数时使用补丁也生效",
                "description": "即，你补丁了一下函数，你去调用它，发现你使用frida打的补丁和hook不生效。1. 补丁函数必须使用。",
                "hasOriginal": true,
                "diggCount": 7,
                "commentCount": 0,
                "postTime": 1704861554000,
                "createTime": 1704861289000,
                "updateTime": 1704861555000,
                "url": "https://blog.csdn.net/aerror/article/details/135500509",
                "articleType": 1,
                "viewCount": 467,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/135500509",
                "collectCount": 6,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2024.01.08",
                "title": "如何绕过pairip的防护",
                "description": "签名绕过的第二个办法是不要改dex, 改一下androidmanifest.xml, 把 com.pairip.application.Application改成android.app.Application. 原理很是com.pairip.application.Application继承android.app.Application， 只是多了一些签名验证，刚好我们不需要，使用基类跑就好了。然后libpairip会开线程，开定时检查一些gdb和frida之类的，检查到就会来个异常把进程搞死.",
                "hasOriginal": true,
                "diggCount": 7,
                "commentCount": 6,
                "postTime": 1704532568000,
                "createTime": 1704532171000,
                "updateTime": 1704680406000,
                "url": "https://blog.csdn.net/aerror/article/details/135429039",
                "articleType": 1,
                "viewCount": 3187,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/135429039",
                "collectCount": 12,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2024.01.07",
                "title": "双向双路电调双流差速算法",
                "description": "这个很简单，就是直接使用油门+转向混合就好，超限的截掉，算法如下。",
                "hasOriginal": true,
                "diggCount": 9,
                "commentCount": 0,
                "postTime": 1704614020000,
                "createTime": 1704614020000,
                "updateTime": 1704614021000,
                "url": "https://blog.csdn.net/aerror/article/details/135440688",
                "articleType": 1,
                "viewCount": 498,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/135440688",
                "collectCount": 10,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2024.01.07",
                "title": "三星galaxy s9 root教程",
                "description": "11.  刷完后因为去掉了auto reboot, 是不会重启的，这个时候按 Volume down + blix + 电源键, 让它重启，这里很重要的一点，就是你必须在关键的一刻，你按键切换成 Volume Up +  blix + 电源键, 等到看到三星的logo，你松开电源键， 保持按住  Volume Up +  blix， 等几秒就看到twrp的界面。8.  按住音量 减（volume down) + blix + 电源键 ， 7秒后，进入刷机模式，按 volume up。",
                "hasOriginal": true,
                "diggCount": 7,
                "commentCount": 0,
                "postTime": 1704531906000,
                "createTime": 1704531146000,
                "updateTime": 1704613558000,
                "url": "https://blog.csdn.net/aerror/article/details/135428689",
                "articleType": 1,
                "viewCount": 4008,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/135428689",
                "collectCount": 7,
                "rtype": "article"
            },
            {
                "type": "download",
                "formatTime": "2023.11.24",
                "title": "Arm Mobile Studio 2023.4 windows x86",
                "description": "Arm Mobile Studio 2023.4 windows   性能调试利器，人手必 备",
                "fileType": "exe",
                "createTime": 1700787969000,
                "url": "https://download.csdn.net/download/aerror/88564843",
                "rtype": "file"
            },
            {
                "type": "blog",
                "formatTime": "2023.09.11",
                "title": "超简单免费转换ape到flac",
                "description": "4.到ape所在的目录，执行以下命令。3. 设置path到ffmpeg。1. 安装最新版的ffmpeg。2. 安装cywin环境。",
                "hasOriginal": true,
                "diggCount": 0,
                "commentCount": 0,
                "postTime": 1694435069000,
                "createTime": 1694435024000,
                "updateTime": 1694440207000,
                "url": "https://blog.csdn.net/aerror/article/details/132816898",
                "articleType": 1,
                "viewCount": 806,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/132816898",
                "collectCount": 0,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2023.07.01",
                "title": "一个TIMER软件模拟输出6个PWM",
                "description": "51单片机的timer很少，往往16bit的timer只有一个，可以硬件输出的channel也不多。只能使用软件模拟了。pwm是1-20ms一个周期，要是设置一个固定的周期，中断间隔就必须比较小，如0.01ms , 这个精度已经不怎么样了，但是每秒还是需要100000次中断，对于51来说，这个压力很大，实测效果很差。1. pwm需要每20ms对pin脚操作两次，周期开始设置它为1，到达指定时间时设置它为0，这个宽度，在航模的信号里，是1-2ms之间。我们将6个通道，每个分时3ms给它做这第一项的两次设置。",
                "hasOriginal": true,
                "diggCount": 0,
                "commentCount": 0,
                "postTime": 1687408614000,
                "createTime": 1687404998000,
                "updateTime": 1688208040000,
                "url": "https://blog.csdn.net/aerror/article/details/131339313",
                "articleType": 1,
                "viewCount": 923,
                "picList": [
                    "https://i-blog.csdnimg.cn/blog_migrate/cover/2b366d0b9167fcaaaa7176da0c026513.png"
                ],
                "editUrl": "https://mp.csdn.net/console/editor/html/131339313",
                "collectCount": 3,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2023.06.26",
                "title": "使用arduino Nano 自制nRF24LE1 的烧录器进行固件烧录",
                "description": "4.解压program.zip得到一个烧录的命令行工具，执行命令进行write或dump。3.  实质是spi下载来的，接线， nRF24LE1是3.3设备，别接5v。也有专门usb编程器，比较贵，可以买个arduino nano自已做一个。需要自己数一下多少pin的，然后和arduino的脚接起来.2. 使用arduino编译烧录固件。1. 下载arduino的烧录固件。",
                "hasOriginal": true,
                "diggCount": 0,
                "commentCount": 0,
                "postTime": 1687793803000,
                "createTime": 1687793157000,
                "updateTime": 1687793857000,
                "url": "https://blog.csdn.net/aerror/article/details/131407302",
                "articleType": 1,
                "viewCount": 1082,
                "picList": [
                    "https://i-blog.csdnimg.cn/blog_migrate/cover/20cc144273995f9843f385205390a13b.png"
                ],
                "editUrl": "https://mp.csdn.net/console/editor/html/131407302",
                "collectCount": 1,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2023.06.24",
                "title": "stm32flash碰到hex文件出错，读取超慢, 占用内存超多的问题解决",
                "description": "这个问题是因为sdcc生成的hex的每行的地址并不是排序的好的，有些高的地址在前面，低的地址在后面，这样的话，stm32flash这个hex.c并不能处理这个情况。里面有一个逻辑是用来填补0xff的，当后面的地址比前面大，一减得负数，但是变量是无符号的，结果就变成了4.2G了，然后一碰到一次就申请4.2G内存，然后填充0xff, 结果读了一个几十k的hex耗时十分钟，还占用超多内存，然后内存还是错的。解决办法，可以使用srec_cat把hex处理一下，输出的文件的地址就是排序好了。",
                "hasOriginal": true,
                "diggCount": 0,
                "commentCount": 0,
                "postTime": 1687610842000,
                "createTime": 1687610742000,
                "updateTime": 1687611242000,
                "url": "https://blog.csdn.net/aerror/article/details/131366245",
                "articleType": 1,
                "viewCount": 461,
                "picList": [
                    "https://i-blog.csdnimg.cn/blog_migrate/cover/28442baf755a43a06d31c3a2cc43a265.png"
                ],
                "editUrl": "https://mp.csdn.net/console/editor/html/131366245",
                "collectCount": 0,
                "rtype": "article"
            }
        ],
        "total": null
    }
}



{
    "code": 200,
    "message": "success",
    "traceId": "6f5e2f5c-13c6-4e8b-9ccd-63818ba6798c",
    "data": {
        "list": [
            {
                "type": "blog",
                "formatTime": "2023.06.24",
                "title": "MacOs 下用于性能优化的“perf“命令",
                "description": "MacOs下面没有这个命令，但有类似的，也是非常方便，它就是 Instruments， 是xcode自带一个性能分析和自动化测试的工具。需要安装Xcode.以下使用例子。",
                "hasOriginal": true,
                "diggCount": 0,
                "commentCount": 0,
                "postTime": 1687597206000,
                "createTime": 1687596893000,
                "updateTime": 1687597400000,
                "url": "https://blog.csdn.net/aerror/article/details/131363680",
                "articleType": 1,
                "viewCount": 1713,
                "picList": [
                    "https://i-blog.csdnimg.cn/blog_migrate/cover/364a602a8bad7ea2eac698e2443fe93c.png"
                ],
                "editUrl": "https://mp.csdn.net/console/editor/html/131363680",
                "collectCount": 0,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2023.01.19",
                "title": "高通Qualcomm处理器的手机或设备进EDL 9008模式的办法",
                "description": "由于我们有很多基于 Qualcomm 的设备，其中一些设备可能会古怪地猜测如何进入 EDL 模式，或者如何正确进入。例如，对于 Alcatel，您必须先按住两个音量键，然后再按住其中一个，对于 CAT B35，您必须按住 * 和 #，对于 8110，您必须按住 Up 和 Down，在此期间您必须插入电缆。因此，一个非常简单的电缆模块（一个穷人的夹具）就派上用场了，它根本不需要焊接。1. 拿一根备用的 microUSB 数据线，剥去中间某处的绝缘层。3.将USB端连接到PC，按住剥开的线约5秒钟。",
                "hasOriginal": true,
                "diggCount": 0,
                "commentCount": 0,
                "postTime": 1674032260000,
                "createTime": 1674032151000,
                "updateTime": 1674104509000,
                "url": "https://blog.csdn.net/aerror/article/details/128728196",
                "articleType": 1,
                "viewCount": 4479,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/128728196",
                "collectCount": 3,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2023.01.16",
                "title": "一个无线鼠标的HID Report Desc",
                "description": "【代码】一个无线鼠标的HID Report Desc。",
                "hasOriginal": true,
                "diggCount": 1,
                "commentCount": 0,
                "postTime": 1673510295000,
                "createTime": 1673510262000,
                "updateTime": 1673857362000,
                "url": "https://blog.csdn.net/aerror/article/details/128661408",
                "articleType": 1,
                "viewCount": 846,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/128661408",
                "collectCount": 5,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2022.11.24",
                "title": "如何修改macOS 照片应用的原图片的目录路径",
                "description": "磁盘系统坏了，是因为使用了HFS+ FOR WINDOWS 在macos和windows两边进行读写修改之类的，结果悲剧了，整个 HFS+的分区都变了成可读，也无法使用“急救”来修复。挂之前的现象的是写大文件会给截断，如8G的文件，copy过去，结果就变成了2G， 太坑了。。。好在还能读，赶紧把最重要的图片放到另一个硬盘上。放完之后，打开“照片”应用，提交原文件不可用，无法打开云云，于是尝试使用sqite3修复一下.1. 先把照片应用都退出ps axe | grep -i ph..",
                "hasOriginal": true,
                "diggCount": 0,
                "commentCount": 0,
                "postTime": 1603965581000,
                "createTime": 1603965581000,
                "updateTime": 1669266261000,
                "url": "https://blog.csdn.net/aerror/article/details/109365032",
                "articleType": 1,
                "viewCount": 2703,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/109365032",
                "collectCount": 1,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2022.07.20",
                "title": "MC6C迈克/FLYSKY富斯/WFLY2天地飞二代接收机远程刷固件教程",
                "description": "1. 安装ch341的驱动程序CH340/CH341 Windows串口驱动安装 - 南京沁恒微电子股份有限公司CH341SER.EXE - 南京沁恒微电子股份有限公司2.ch341的跳线跳到usb To ttl3.接收机飞线4.连接5v, RX, TX GND 到接收机的+,3, 1 ,G5.下载stm32isp程序安装6. 接上ch341到电脑7. 打开stm32isp程序8.输入密码，密码找卖家要，点击登录9.点击下载10. 拆除接收机飞线........",
                "hasOriginal": true,
                "diggCount": 0,
                "commentCount": 0,
                "postTime": 1652689281000,
                "createTime": 1652686326000,
                "updateTime": 1658246569000,
                "url": "https://blog.csdn.net/aerror/article/details/124800906",
                "articleType": 1,
                "viewCount": 3677,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/124800906",
                "collectCount": 1,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2022.05.10",
                "title": "富斯/MC6接收机说明书",
                "description": "正面 反面1. PWM输出通道多达6个， 可以自由切换7种模式，自由选择无刷，有刷，差速，炫酷的RGB全彩灯带等，自由玩耍。2. 集成两个5A有刷电调，通过模式选择，可以双发，可差速，支持8250以下的空心杯有刷电机3. 支持16通(MC6/7C 14通)sbus(第15通是RSSI),9通ppm（第9通是RSSI）,可以接飞控，飞fpv. 4. 支持Failsafe失控保护，只需要直接在摇控器的Fail...",
                "hasOriginal": true,
                "diggCount": 4,
                "commentCount": 0,
                "postTime": 1650438582000,
                "createTime": 1650438377000,
                "updateTime": 1652177645000,
                "url": "https://blog.csdn.net/aerror/article/details/124298189",
                "articleType": 1,
                "viewCount": 12290,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/124298189",
                "collectCount": 23,
                "rtype": "article"
            },
            {
                "type": "download",
                "formatTime": "2008.09.22",
                "title": "c#写的Sniffer的源代码",
                "description": "c#写的Sniffer的源代码\n网络监听",
                "fileType": "application/x-rar",
                "createTime": 1222091532000,
                "url": "https://download.csdn.net/download/aerror/643241",
                "rtype": "file"
            },
            {
                "type": "download",
                "formatTime": "2021.01.12",
                "title": "adbd root修改版本",
                "description": "修改过的adbd的arm的（非amr64）， 用来让adb 可以用root的权限启动，方便调试。",
                "fileType": "zip",
                "createTime": 1610433412000,
                "url": "https://download.csdn.net/download/aerror/14122036",
                "rtype": "file"
            },
            {
                "type": "download",
                "formatTime": "2011.12.09",
                "title": "lzma in as3",
                "description": "as3 实现的lzma解码, 从官方的java代码移植过来的。\n使用例子\n   public static function decode(src:ByteArray) : ByteArray\n        {\n            if (src == null || src.length < 16)\n            {\n                return null;\n            }\n\t\t\t\n\t\t\t\t\t\tvar inStream:InputStream = new InputStream(src);\n\t\t\t\t\t\tvar propertiesSize:int = 5;\n\t\t\t\t\t\tvar properties:Vector.<uint> = new Vector.<uint>(propertiesSize);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (inStream.readVOL(properties, 0, propertiesSize) != propertiesSize)\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\tvar decoder:Decoder = new Decoder();\n\t\t\t\t\t\tif (!decoder.SetDecoderProperties(properties))\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\tvar outSize:uint = 0;\n\t\t\t\t\t\tfor (var i:int = 0; i < 8; i++)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar v:int = inStream.read();\n\t\t\t\t\t\t\tif (v < 0)\n\t\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t\toutSize |= (v << (8 * i));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tvar ret:ByteArray = new ByteArray();\n\t\t\t\t\t\tret.length = outSize;\n\t\t\t\t\t\tvar outStream:OutputStream = new OutputStream(ret);\n\t\t\t\t\t\tif (!decoder.Code(inStream, outStream, outSize))\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\tinStream.close();\n\t\t\t\t\t\toutStream.close();\n\t\t\t\t\t\tret.position =0;\n\t\t\t\t\t\treturn ret;\n\n        }",
                "fileType": "rar",
                "createTime": 1323364008000,
                "url": "https://download.csdn.net/download/aerror/3898251",
                "rtype": "file"
            },
            {
                "type": "download",
                "formatTime": "2020.11.17",
                "title": "2013-2014的MBP的固件427",
                "description": "从Big sur安装包解出来的，2013和2014的MBP的固件, 版本是427,  放上来，方便大家更新，而无须下载12G的安装包，也不须要安装最新的系统就可以升级固件。\n具体升级操作办法看我的文章:https://blog.csdn.net/aerror/article/details/91486841",
                "fileType": "zip",
                "createTime": 1605600852000,
                "url": "https://download.csdn.net/download/aerror/13119980",
                "rtype": "file"
            },
            {
                "type": "download",
                "formatTime": "2014.03.04",
                "title": "Finger Sensing Pad macos x 触模板 驱动源代码",
                "description": "Finger Sensing Pad macos x 触模板 驱动源代码， 基于voodoops2项目。适用于Sentelic的\n STL3888-Cx and STL3888-Dx系列的触摸板。一般联想，神舟， msi的笔记本会用到。",
                "fileType": "gz",
                "createTime": 1393864842000,
                "url": "https://download.csdn.net/download/aerror/6988913",
                "rtype": "file"
            },
            {
                "type": "download",
                "formatTime": "2020.05.28",
                "title": "com.goplaycn.googleinstall.apk",
                "description": "这个安装器是从vivo的商店下载的，用来在小米10上来安装google play的服务，帐号和商店，之前发的安装包安装的google play会闪退。可以试一下这个会不会",
                "fileType": "apk",
                "createTime": 1590648153000,
                "url": "https://download.csdn.net/download/aerror/12470119",
                "rtype": "file"
            },
            {
                "type": "blog",
                "formatTime": "2022.01.12",
                "title": "自制2.4G ELRS接收机，不需要打板，容易制作",
                "description": "制作难度：中等，主要是器件太小，焊接需要耐心一。硬件材料1.LoRa射频模块，sx1280 ： E28-2G4M12S2.MCU Wifi模块：ESP-01F3.各色硅胶软线若干4.1k电阻5. TTL转串口 CH341 （CH340或FTDI随便一个即可。）6. DC-DC3.3v降压模块7. LED灯一个。二。软件：1. EpressLRS Configuratorhttps://github.com/ExpressLRS/ExpressLRS-Configu..",
                "hasOriginal": true,
                "diggCount": 5,
                "commentCount": 6,
                "postTime": 1641178492000,
                "createTime": 1641176594000,
                "updateTime": 1641970531000,
                "url": "https://blog.csdn.net/aerror/article/details/122284559",
                "articleType": 1,
                "viewCount": 10346,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/122284559",
                "collectCount": 33,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2022.01.04",
                "title": "自制2.4G ELRS TX高频头, 内置于富斯i6",
                "description": "制作难度：容易一。硬件材料：1.LoRa射频模块，sx1280 ： E28-2G4M27S2.MCU Wifi模块：ESP-WROOM323.各色硅胶软线若干4.1k电阻5.富斯FS I6摇控器6.JLink一个，刷写固件用7. 2.4G天线一个软件：1. EpressLRS Configuratorhttps://github.com/ExpressLRS/ExpressLRS-Configurator2.我写的的FSi6固件, ERFLY6,GitHub...",
                "hasOriginal": true,
                "diggCount": 8,
                "commentCount": 31,
                "postTime": 1641175314000,
                "createTime": 1641172301000,
                "updateTime": 1641259974000,
                "url": "https://blog.csdn.net/aerror/article/details/122283917",
                "articleType": 1,
                "viewCount": 9086,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/122283917",
                "collectCount": 33,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2021.12.31",
                "title": "STM32 LL库 操作FLASH 保存数据",
                "description": "#include \"string.h\"#include \"stm32f1xx_ll_system.h\"#define FLASH_PAGE_SIZE ((uint32_t)0x00000400)#define LL_FLASH_GET_FLAG(__FLAG__) (((__FLAG__) == FLASH_FLAG_OPTVERR) ? \\                      (FLASH-&gt;OBR &amp; FLASH_OBR_OPT...",
                "hasOriginal": true,
                "diggCount": 1,
                "commentCount": 0,
                "postTime": 1640937009000,
                "createTime": 1640937000000,
                "updateTime": 1640937204000,
                "url": "https://blog.csdn.net/aerror/article/details/122257900",
                "articleType": 1,
                "viewCount": 1989,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/122257900",
                "collectCount": 1,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2021.12.31",
                "title": "STM32 LL库使用SPI读写",
                "description": "void Rfchip_Spi_Init(void){ LL_GPIO_ResetOutputPin(GPIOA,LL_GPIO_PIN_5); LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_7); RFChip_Disable;}void Rf_Spi_Write_Byte(uint8_t dat){ LL_GPIO_ResetOutputPin(GPIOA,LL_GPIO_PIN_5); LL_GPIO_Se...",
                "hasOriginal": true,
                "diggCount": 0,
                "commentCount": 0,
                "postTime": 1640937062000,
                "createTime": 1640937049000,
                "updateTime": 1640937204000,
                "url": "https://blog.csdn.net/aerror/article/details/122257924",
                "articleType": 1,
                "viewCount": 3486,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/122257924",
                "collectCount": 2,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2021.12.31",
                "title": "Freescale 飞思卡尔使用UART中断，单线UART",
                "description": "1void setup_crsf_serial_port(uint32_t baud,crsf_read_cb_t read_cb){  if(g_crsf_read_callback==0)  {        g_crsf_read_callback = read_cb;      //uart_single_init(bdrate,DEFAULT_SYSTEM_CLOCK,bdrate);//Set single wire mode.      SIM-&gt;SCGC4 |= S",
                "hasOriginal": true,
                "diggCount": 0,
                "commentCount": 0,
                "postTime": 1640936787000,
                "createTime": 1640936765000,
                "updateTime": 1640937137000,
                "url": "https://blog.csdn.net/aerror/article/details/122257781",
                "articleType": 1,
                "viewCount": 549,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/122257781",
                "collectCount": 2,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2021.12.31",
                "title": "STM32 使用 LL库进行I2C读写",
                "description": "为什么要使用LL库，因为生成的固件大小可以小很多很多，MCU贵呀，可以省很多成本了。uint8_t i2c_read_len(I2C_TypeDef *I2Cx, uint8_t Addr , uint8_t Reg, uint8_t len,uint8_t *buf)；uint8_t i2c_write_len(I2C_TypeDef *I2Cx, uint8_t addr , uint8_t reg, uint8_t len,uint8_t *buf)；实现这两个函数，理论上全...",
                "hasOriginal": true,
                "diggCount": 11,
                "commentCount": 3,
                "postTime": 1640936805000,
                "createTime": 1636861493000,
                "updateTime": 1640937137000,
                "url": "https://blog.csdn.net/aerror/article/details/121315740",
                "articleType": 1,
                "viewCount": 6895,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/121315740",
                "collectCount": 42,
                "rtype": "article"
            },
            {
                "type": "download",
                "formatTime": "2020.05.27",
                "title": "GoogleInstaller_3.0.apk",
                "description": "用来安装google play的服务，帐号，同步通信录，和google 商店, 适用于华为nova , 小米10等等",
                "fileType": "apk",
                "createTime": 1590583105000,
                "url": "https://download.csdn.net/download/aerror/12467177",
                "rtype": "file"
            },
            {
                "type": "download",
                "formatTime": "2017.11.12",
                "title": "Geekbench 4.2.0破解补丁",
                "description": "自行到官网安装原版，把这里下载的替换MacOs下的同名的文件，修改到正确的权限， 要是出现文件给破坏，或者说无法打开，请设置信任任何来源，或者自己签名一下sudo codesign -f -s - Geekbench\\ 4",
                "fileType": "zip",
                "createTime": 1510498941000,
                "url": "https://download.csdn.net/download/aerror/10115611",
                "rtype": "file"
            }
        ],
        "total": null
    }
}


{
    "code": 200,
    "message": "success",
    "traceId": "053c6db4-2fd2-40cf-9b08-013ec0b62c59",
    "data": {
        "list": [
            {
                "type": "blog",
                "formatTime": "2021.11.10",
                "title": "MacOS Arduino开发环境搭建和编译minimosd-extra",
                "description": "1.从arduino官方网站：https://www.arduino.cc/en/Main/Software下载mac平台的IDE2.安装Arduino Makefile ，  git clone https://github.com/sudar/Arduino-Makefile.git3. 下载minimosd-extra源代码git clone https://github.com/night-ghost/minimosd-extra.git4.下载Sing...",
                "hasOriginal": true,
                "diggCount": 0,
                "commentCount": 0,
                "postTime": 1636525287000,
                "createTime": 1636524725000,
                "updateTime": 1636525422000,
                "url": "https://blog.csdn.net/aerror/article/details/121247353",
                "articleType": 1,
                "viewCount": 461,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/121247353",
                "collectCount": 1,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2021.11.01",
                "title": "STM32F103C6Tx CubeMx HAL I2c不工作原因",
                "description": "发现使用STM32F103C8 i2c是可以工作了，要是cpu选STM32F103C6Tx发现生成代码i2c不工作，多次尝试和比较发现，STM32F103C6Tx生成的i2c的msp初始化gpio的时候少了一个速度的配置:  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;加上这行就正常工作了。汗。void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle){  GPIO_InitTyp...",
                "hasOriginal": true,
                "diggCount": 6,
                "commentCount": 6,
                "postTime": 1635775436000,
                "createTime": 1635775341000,
                "updateTime": 1635780725000,
                "url": "https://blog.csdn.net/aerror/article/details/121089957",
                "articleType": 1,
                "viewCount": 2535,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/121089957",
                "collectCount": 21,
                "rtype": "article"
            },
            {
                "type": "download",
                "formatTime": "2019.11.07",
                "title": "File_DXE_driver_NVMe_mbp114.ffs",
                "description": "NVME MPB114 EFI, 上传给那些在安装包里找到不的人。\n这个是从安装下里解出来的。应该是直接替换上去就可以了",
                "fileType": "ffs",
                "createTime": 1573139740000,
                "url": "https://download.csdn.net/download/aerror/11965240",
                "rtype": "file"
            },
            {
                "type": "download",
                "formatTime": "2017.04.23",
                "title": "clover+EFI+gtx1080 +msiX99ARaider+i76800k+sm951 NVMe.zip",
                "description": "安装配置： clover+EFI+gtx1080 +msiX99ARaider+i76800k+sm951 NVMe",
                "fileType": "zip",
                "createTime": 1492960960000,
                "url": "https://download.csdn.net/download/aerror/9823210",
                "rtype": "file"
            },
            {
                "type": "blog",
                "formatTime": "2021.08.13",
                "title": "Light Room Classic 9.4 MacOS闪退解决办法",
                "description": "好像没有打开Light Room Classic, 今天打开发现slpash 出现之后就直接闪退，百思不解，好像很久什么都没有干呀。试一下把网络禁了，发现不闪了。 哦。。。。。原来如此。好吧，tcpdump分析一下，看看闪退之前访问了什么网络。sudo tcpdump -i en0 port 53Password:tcpdump: verbose output suppressed, use -v or -vv for full protocol decodelistening on e",
                "hasOriginal": true,
                "diggCount": 0,
                "commentCount": 0,
                "postTime": 1628783692000,
                "createTime": 1628783216000,
                "updateTime": 1628841021000,
                "url": "https://blog.csdn.net/aerror/article/details/119656642",
                "articleType": 1,
                "viewCount": 2476,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/119656642",
                "collectCount": 0,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2021.05.20",
                "title": "新唐n76e003单片机遥控PWM信号检测控制航灯系统",
                "description": "第一次使用学习单片机编程, 使用了n76e003， 主要在检测pwm的信号问题上花了比较多的时间，最后是使用了timer2的0通道来捕捉上升缘，1通道来捕捉下降缘来检测pwm的宽度。接收机是0-2000us pwm输出，500-1000是基础的pwm, 就是说没有信号也定期输出500（舵机）或1000（油门），这样单片机可以检测到有无信号.timer0来控制led的开关和闪烁，timer0使用10khz， timer2使用16m的时钟.#include \"N76E003.h\"#incl.",
                "hasOriginal": true,
                "diggCount": 1,
                "commentCount": 1,
                "postTime": 1621430121000,
                "createTime": 1621429858000,
                "updateTime": 1621489008000,
                "url": "https://blog.csdn.net/aerror/article/details/117046755",
                "articleType": 1,
                "viewCount": 1350,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/117046755",
                "collectCount": 6,
                "rtype": "article"
            },
            {
                "type": "download",
                "formatTime": "2008.05.31",
                "title": "SharpSniffer",
                "description": "提供的功能:<br><br>1.监听指定的网络接口的基于IP的网络包,如TCP,UDP,ICMP等<br><br>2.基本C#的脚本自定义数据包解析器, 动态编辑，加载, 保存，编译和管理C#解析器代码。对于一些简单的协议直接可以使用自定义的解析器进行分析和处理.<br><br>3.可方便的编辑，加载，保存,使用和管理协议过滤器.<br><br> <br><br>",
                "fileType": "application/x-rar",
                "createTime": 1212210976000,
                "url": "https://download.csdn.net/download/aerror/476261",
                "rtype": "file"
            },
            {
                "type": "blog",
                "formatTime": "2021.03.15",
                "title": "Macbook pro/air 2013 late -2014 使用转接卡更换NVME SSD休眠不醒问题的解决办法",
                "description": "、、1. 手上512GMBP 2013 late差不多满了，因为穷，所以在淘宝上买了一个NVME转Macbookpcie，然后再买一个NVME 2T的硬盘2. NVME因为需要最新的Firmware Rom支持，所以必须使用原装的硬盘（必须原装）安装Mac14以上，我安装了14.5.要不然识别不出来新安装的NVME硬盘3. 买之前就知道是会有休眠问题的，问了卖家推荐了一些型号说不...",
                "hasOriginal": true,
                "diggCount": 26,
                "commentCount": 200,
                "postTime": 1560273114000,
                "createTime": 1560273114000,
                "updateTime": 1615786299000,
                "url": "https://blog.csdn.net/aerror/article/details/91486841",
                "articleType": 1,
                "viewCount": 56155,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/91486841",
                "collectCount": 98,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2021.01.18",
                "title": "小米10 adbd 以root权限启动提供服务",
                "description": "之前写了类似的文章，但是这个文章办法不适用于小米10, 原文参考：https://blog.csdn.net/aerror/article/details/103270830主要有几个问题:1. supolicy这个在小米10 中root之后运行不起来，直接segment fault.2. 小米的文件系统remont 成rw失败,提示1|vangogh:/data/local # mount -o remount,rw /                ...",
                "hasOriginal": true,
                "diggCount": 0,
                "commentCount": 1,
                "postTime": 1610711694000,
                "createTime": 1610711694000,
                "updateTime": 1610936150000,
                "url": "https://blog.csdn.net/aerror/article/details/112686250",
                "articleType": 1,
                "viewCount": 2388,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/112686250",
                "collectCount": 4,
                "rtype": "article"
            },
            {
                "type": "download",
                "formatTime": "2021.01.15",
                "title": "adbd arm64 root 修改版",
                "description": "用于需要adbd root 权限启动的adbd 修改版本，从android 10 的system.img解压得到\n",
                "fileType": "zip",
                "createTime": 1610710181000,
                "url": "https://download.csdn.net/download/aerror/14429391",
                "rtype": "file"
            },
            {
                "type": "blog",
                "formatTime": "2021.01.12",
                "title": "Android 让adb以root的身份来运行",
                "description": "1. 首先安装自己手机对应的root的image, 如twrp.img    //上传supersu 到   adb push SuperSU-v2.79-20161211114519.zip  /mnt/sdcard/supersu.zip adb reboot fastboot   //等重启好  fastboot flash recovery twrp-3.3.1-0...",
                "hasOriginal": true,
                "diggCount": 0,
                "commentCount": 0,
                "postTime": 1574822685000,
                "createTime": 1574822685000,
                "updateTime": 1610433464000,
                "url": "https://blog.csdn.net/aerror/article/details/103270830",
                "articleType": 1,
                "viewCount": 3209,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/103270830",
                "collectCount": 4,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2020.06.03",
                "title": "小米10如何安装google play商店",
                "description": "查了一下网上说可以安装gmail, 小米商店就会自动安装google play的， 但是发现gmail在小米商店已经提示说“因为软件本身问题不能给安装\"， 查了一无果，于是用之前华为安装google的apk来进行安装.https://download.csdn.net/download/aerror/12467177...",
                "hasOriginal": true,
                "diggCount": 1,
                "commentCount": 0,
                "postTime": 1590583137000,
                "createTime": 1590583137000,
                "updateTime": 1591169728000,
                "url": "https://blog.csdn.net/aerror/article/details/106390026",
                "articleType": 1,
                "viewCount": 49147,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/106390026",
                "collectCount": 5,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2017.11.12",
                "title": "OpenGL shader 内置函数 和 unity3d shaderlib 内置函数对照表",
                "description": "-----opengl    ---shaderlabfract        fracmix                 lerptexture2D     tex2Dinversesqrt   rsqrtmodfood",
                "hasOriginal": true,
                "diggCount": 0,
                "commentCount": 0,
                "postTime": 1466082240000,
                "createTime": 1466082240000,
                "updateTime": 1510500000000,
                "url": "https://blog.csdn.net/aerror/article/details/51694603",
                "articleType": 1,
                "viewCount": 2519,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/51694603",
                "collectCount": 2,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2008.10.28",
                "title": "Windows获取本地机器的全部网络配置信息",
                "description": " Q:WINSOCK库的GetAddressByName 和gethostbyname 返回的信息无法满足我的要求,我想获取更详细的信息,我要知道一切信息,至少要像ipconfig /all 命令输出那样详细, 怎么办?A:使用windows SDK提供的IP Helper 库吧,它可以解决你上述的所有要求,使用它,你可以获取或配置本机的TCP/IP( Transmission Con",
                "hasOriginal": true,
                "diggCount": 0,
                "commentCount": 0,
                "postTime": 1225195320000,
                "createTime": 1225195320000,
                "updateTime": 1225196340000,
                "url": "https://blog.csdn.net/aerror/article/details/3169102",
                "articleType": 1,
                "viewCount": 9121,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/3169102",
                "collectCount": 3,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2020.12.10",
                "title": "编写ASCOM平台的驱动",
                "description": "近来在玩天文，自己DIY了一个电动的调焦。ASCOM平台是一个天文的驱动和软件的开发标准，它是一个开源的开放平台。主要是使用了.net的技术。https://ascom-standards.org开发工具：1. Visual studion 2012/2013，太高的版本好像开发包不支持。2.Inno setup, 用来制作驱动的安装包，ascom的开发包，有自动生成这个安装脚本的工具，很方便3.开发文档：https://ascom-standards.org/Develop...",
                "hasOriginal": true,
                "diggCount": 4,
                "commentCount": 8,
                "postTime": 1607567091000,
                "createTime": 1607567091000,
                "updateTime": 1607567160000,
                "url": "https://blog.csdn.net/aerror/article/details/110947271",
                "articleType": 1,
                "viewCount": 5471,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/110947271",
                "collectCount": 19,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2020.10.30",
                "title": "lldb调试objc程序使用正则表达式下断点",
                "description": "ObjectC的函数名怪怪的，又空格，又+/-:号，又括号。下断点很麻烦。可以试试 -r选项 , 可以正则表达式来模糊下断点，还是比较方便了。如:(lldb) br set -r IPXReconnectManager initWithAsset:hostWindow:finishedBlock\\]Breakpoint 18: 20 locations.(lldb) breakpoint listCurrent breakpoints:18: regex = 'IPXRec.",
                "hasOriginal": true,
                "diggCount": 0,
                "commentCount": 0,
                "postTime": 1603878259000,
                "createTime": 1603878259000,
                "updateTime": 1604026505000,
                "url": "https://blog.csdn.net/aerror/article/details/109338632",
                "articleType": 1,
                "viewCount": 483,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/109338632",
                "collectCount": 0,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2020.10.30",
                "title": "如何使用MacOs/IOS的私用不公开框架(PrivateFrameworks)",
                "description": "我需要写个程序调用一下[PLSandboxHelper processCanReadSandboxForPath], 它是一个由AssetsLibraryServices.framework(/System/Library/PrivateFrameworks/AssetsLibraryServices.framework)提供的。有两个问题要解决：1. 没有这个的头文件， 编译就会不过2.Frameworks那里在 Link Binary With Library里没有列出PrivateFramew",
                "hasOriginal": true,
                "diggCount": 0,
                "commentCount": 0,
                "postTime": 1604026193000,
                "createTime": 1604026193000,
                "updateTime": 1604026262000,
                "url": "https://blog.csdn.net/aerror/article/details/109380590",
                "articleType": 1,
                "viewCount": 3591,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/109380590",
                "collectCount": 0,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2020.09.23",
                "title": "关于Hook unistd中open, read, write, close的一些技巧",
                "description": "open , read, write, close, flock, fileno, lseek, lseek64, 这些都是使用一个int的文件描述符的，对于我们hook的时候，一般来说，我们是想在open这里，我们去打开一个自己的文件，可能这个并不是一个真实的文件，如这个我们需要维护一个类的指针，我们必须用一个整数去关联这个这个指针，因为返回值，我们只能是整型，fd这个东西是一个整数，它有自己的规则，又是系统维护的，我们必须返回一个整数和系统不冲突或重复的，我们才能在后面的read, write这里判断出",
                "hasOriginal": true,
                "diggCount": 0,
                "commentCount": 0,
                "postTime": 1589268372000,
                "createTime": 1589268372000,
                "updateTime": 1600858049000,
                "url": "https://blog.csdn.net/aerror/article/details/106076941",
                "articleType": 1,
                "viewCount": 986,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/106076941",
                "collectCount": 0,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2020.08.25",
                "title": "Wacom 数位板 和冠 手绘笔 Photoshop MacOS 延时卡顿丢笔解决办法",
                "description": "试了在macos的下面使用photoshop 笔画延时，经常画得快就偶尔丢几笔，直线变折线，查了以下：1. 关闭平滑2.关闭压力3.打开首选项－常规－性能,选择图形处理器设置－高级，将第一项改为正常或基本4. 关闭标尺5.点击画笔设置,勾选间距一栏，并将间距数值调整到40以上100以下...",
                "hasOriginal": true,
                "diggCount": 1,
                "commentCount": 2,
                "postTime": 1598185502000,
                "createTime": 1598185502000,
                "updateTime": 1598322275000,
                "url": "https://blog.csdn.net/aerror/article/details/108187163",
                "articleType": 1,
                "viewCount": 7033,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/108187163",
                "collectCount": 0,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2020.08.22",
                "title": "使用nghttp2实现IOS 的 APNS的推送测试例子",
                "description": "能用代码就不废话#ifdef HAVE_CONFIG_H#  include &lt;config.h&gt;#endif /* HAVE_CONFIG_H */#include &lt;inttypes.h&gt;#include &lt;stdlib.h&gt;# include &lt;fcntl.h&gt;#include &lt;sys/types.h&gt;#  include &lt;sys/socket.h&gt;#  include &lt;netdb..",
                "hasOriginal": true,
                "diggCount": 0,
                "commentCount": 0,
                "postTime": 1598088535000,
                "createTime": 1598088535000,
                "updateTime": 1598088851000,
                "url": "https://blog.csdn.net/aerror/article/details/108171590",
                "articleType": 1,
                "viewCount": 828,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/108171590",
                "collectCount": 2,
                "rtype": "article"
            }
        ],
        "total": null
    }
}


{
    "code": 200,
    "message": "success",
    "traceId": "f3971858-0bd8-4764-bb90-4f0add6e6992",
    "data": {
        "list": [
            {
                "type": "blog",
                "formatTime": "2020.07.31",
                "title": "如何解开和反编译思科cisco的交换机固件",
                "description": "下载固件，如image_tesla_hybrid_2.5.0.83_release_cisco_signed.bin1.下载安装 binwalkbrew install binwalk2.下载安装lzopbrew install loop3.使用binwalk解开文件binwalk -eM   image_tesla_hybrid_2.5.0.83_release_cisco_signed.bin4._image_tesla_hybrid_2.5.0.83_release",
                "hasOriginal": true,
                "diggCount": 1,
                "commentCount": 5,
                "postTime": 1596166791000,
                "createTime": 1596166791000,
                "updateTime": 1596182819000,
                "url": "https://blog.csdn.net/aerror/article/details/107709901",
                "articleType": 1,
                "viewCount": 2396,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/107709901",
                "collectCount": 1,
                "rtype": "article"
            },
            {
                "type": "download",
                "formatTime": "2017.07.14",
                "title": "Clover_v2.4k_r4114 for x99",
                "description": "针对x99主板：\n1.将free2000这个功能和OsxAptioFixDrv-64.efi ，合并到一起了，安装时只需要安装OsxAptioFixDrv-64.efi,其它OsxAptio开头的都不需要了.\n2. 如果不使用OsxAptioFixDrv-64.efi, 可以使用OsxAptioFix2Drv-64.efi,这个也是合并了free2000的功能， 安装了这个其它OsxAptio开头的都不需要了.\n\n1.2 都是为了解决关于x99启动时无法 boot起来的错误:\n OsxAptioFixDrv: AllocateRelocBlock(): can not allocate relocation block (0x16687 pages below 0x100000000)",
                "fileType": "pkg",
                "createTime": 1500044795000,
                "url": "https://download.csdn.net/download/aerror/9899392",
                "rtype": "file"
            },
            {
                "type": "download",
                "formatTime": "2017.11.12",
                "title": "Clover EFI For MSI X99ARaider E5-2696V4 MacOS High Sierra 10.13",
                "description": "Clover EFI For MSI X99ARaider E5-2696V4 MacOS High Sierra 10.13,  相同主板的直接替换就好了。",
                "fileType": "zip",
                "createTime": 1510499565000,
                "url": "https://download.csdn.net/download/aerror/10115615",
                "rtype": "file"
            },
            {
                "type": "download",
                "formatTime": "2019.07.03",
                "title": "Gigabyte Phoenix X99 SLI +Vega64+Xeon E5 2996V4 EFI.zip",
                "description": "Gigabyte Phoenix X99 SLI +Vega64+Xeon E5 2996V4 黑苹果Clover EFI  用于MacOS 10.14.5",
                "fileType": "zip",
                "createTime": 1562089284000,
                "url": "https://download.csdn.net/download/aerror/11270433",
                "rtype": "file"
            },
            {
                "type": "download",
                "formatTime": "2019.11.27",
                "title": "twrp-3.3.1-0-shamu.img",
                "description": "这个是用于nexus 6的 root的recovery的img, 请看清楚，刷错后果自负，这个是来自twrp的官方，仅仅是搬运过来，方便大家下载的。",
                "fileType": "img",
                "createTime": 1574822668000,
                "url": "https://download.csdn.net/download/aerror/12000228",
                "rtype": "file"
            },
            {
                "type": "download",
                "formatTime": "2019.11.30",
                "title": "VegaGraphicsFixup.kext.zip",
                "description": "Vega64 macOS 10.15.1 启动后黑屏问题解决驱动，原来使用的补丁已经失效了，上传给有需要的人使用了。",
                "fileType": "zip",
                "createTime": 1575122563000,
                "url": "https://download.csdn.net/download/aerror/12007705",
                "rtype": "file"
            },
            {
                "type": "download",
                "formatTime": "2017.11.12",
                "title": "Synalyze It! Pro 1.20 破解补丁",
                "description": "Synalyze It! Pro 1.20 补丁，自行到官网安装原版，把这里下载的替换MacOs下的同名的文件，修改到正确的权限，\n要是出现文件给破坏，或者说无法打开，请设置信任任何来源，或者自己签名一下sudo codesign -f -s -  MacOS/Synalyze\\ It\\!\\ Pro",
                "fileType": "zip",
                "createTime": 1510498698000,
                "url": "https://download.csdn.net/download/aerror/10115608",
                "rtype": "file"
            },
            {
                "type": "blog",
                "formatTime": "2020.06.25",
                "title": "神牛TT685C闪光灯ETTL模式不同步解决方案",
                "description": "相机闪光灯突然工作不正常了，虽然灯有闪但是闪了和没闪一样，严重曝光不足，遍查了网上也没发现解决方案。开机后按住 “Zm/C.Fn”按键 2 秒，进入 C.Fn 菜单。右上角显示 Ver 3.3 为版本号.发现 godox.com.cn/Downloads_s_Firmware.htmlTT685C_V3.4点击下载2019-05-071、解决与新相机EOS R、1500D、3000D的兼容问题。2、兼容神牛无线宾得(PENTAX)X系统。刚好是我的相机型号, 应该是要刷.",
                "hasOriginal": true,
                "diggCount": 0,
                "commentCount": 0,
                "postTime": 1593010676000,
                "createTime": 1593010676000,
                "updateTime": 1593015776000,
                "url": "https://blog.csdn.net/aerror/article/details/106952336",
                "articleType": 1,
                "viewCount": 3967,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/106952336",
                "collectCount": 0,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2020.06.09",
                "title": "编译php7 指定remi扩展目录和ini的配置目录",
                "description": "安装了remi源的php74 , 想修改一下代码，使用回remi的配置和扩展,可以这样做：EXTENSION_DIR=/opt/remi/php74/root/usr/lib64/php/modules ./configure --prefix=/opt/remi/php74/root --with-config-file-path=/etc/opt/remi/php74/",
                "hasOriginal": true,
                "diggCount": 0,
                "commentCount": 0,
                "postTime": 1591684056000,
                "createTime": 1591684056000,
                "updateTime": 1591684463000,
                "url": "https://blog.csdn.net/aerror/article/details/106640660",
                "articleType": 1,
                "viewCount": 1091,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/106640660",
                "collectCount": 0,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2020.06.01",
                "title": "如何修改android的so文件进行api HOOK钩子补丁",
                "description": "1. 准备工具和环境  1.1 android NDK  1.2 android SDK  1.3Synalyze It! Pro, 安装ELF语法  1.4 elf文件格式文档.2. 文件格式是 ELF, 组织如下实例:3.我们只需要做以下修改就可以，  3.1 在SHT_DYNAMIC这里增加我们的so，一般来说这个段都有一些...",
                "hasOriginal": true,
                "diggCount": 0,
                "commentCount": 0,
                "postTime": 1588232941000,
                "createTime": 1588232941000,
                "updateTime": 1590976549000,
                "url": "https://blog.csdn.net/aerror/article/details/105861731",
                "articleType": 1,
                "viewCount": 1116,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/105861731",
                "collectCount": 1,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2020.05.18",
                "title": "GDB windows powershell 如何把一个命令输出结果赋值给一个变量",
                "description": "找了一轮没有找到，发现可以使用$X=(...)这样来实现awk是安装了http://sourceforge.net/projects/gnuwin32/files/gawk/3.1.6-1/gawk-3.1.6-1-bin.zip/downloadPS C:\\Users&gt; $XXX=(adb shell ps  | findstr \"hsalpha\" | awk '{print $2}')PS C:\\Users&gt; echo XXX7147PS C:\\Users&gt; $.",
                "hasOriginal": true,
                "diggCount": 0,
                "commentCount": 0,
                "postTime": 1589616132000,
                "createTime": 1589616132000,
                "updateTime": 1589780838000,
                "url": "https://blog.csdn.net/aerror/article/details/106160361",
                "articleType": 1,
                "viewCount": 4668,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/106160361",
                "collectCount": 2,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2020.05.04",
                "title": "使用shell将一个目录的所有文件移动以年月为名的文件夹中",
                "description": "首先创建一个临时的目录：mkdir tempformv使用stat,cut和mkdir创建以月份为名的文件夹$stat -c \"%y\" * | cut -b1-7 | sort | uniq | while read line ;do mkdir tempformv/$line; done $ls tempformv/2010-05  2020-05生成要执行的命令...",
                "hasOriginal": true,
                "diggCount": 0,
                "commentCount": 0,
                "postTime": 1588604578000,
                "createTime": 1588604578000,
                "updateTime": 1588604578000,
                "url": "https://blog.csdn.net/aerror/article/details/105925204",
                "articleType": 1,
                "viewCount": 326,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/105925204",
                "collectCount": 0,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2020.05.03",
                "title": "Linux如何自动挂载和卸载usb外部硬盘",
                "description": "有一个usb外置的硬盘，想插电直接可以linux挂载，关电linux直接umount, 查了一下没有一个比较合适的解决方案。于是自己写了一脚本，然后使用crontab 每10秒运行一次。计划任务,增加每分钟的任务crontab -e#增加每分钟的任务* * * * * /etc/misc/usb_auto_check.sh &amp;&gt;&gt;/var/log/usb_aut...",
                "hasOriginal": true,
                "diggCount": 1,
                "commentCount": 0,
                "postTime": 1588483676000,
                "createTime": 1588483676000,
                "updateTime": 1588483764000,
                "url": "https://blog.csdn.net/aerror/article/details/105902581",
                "articleType": 1,
                "viewCount": 402,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/105902581",
                "collectCount": 1,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2020.04.14",
                "title": "MacOS IOS Mach-O修改补丁之增加外部未定义符号并调用",
                "description": "1. Mach-O的文件的基本结果如下：2.例子文件所有头部：Mach header      magic cputype cpusubtype  caps    filetype ncmds sizeofcmds      flags   MH_MAGIC     ARM         V7  0x00      OBJECT     5       1960 SUBSE...",
                "hasOriginal": true,
                "diggCount": 0,
                "commentCount": 0,
                "postTime": 1586772212000,
                "createTime": 1586772212000,
                "updateTime": 1586870643000,
                "url": "https://blog.csdn.net/aerror/article/details/105492412",
                "articleType": 1,
                "viewCount": 686,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/105492412",
                "collectCount": 0,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2020.03.09",
                "title": "使用sql批量修改MacOs照片应用(Photos)上的照片时间",
                "description": "1. cd ~/照片图库.photoslibrary2. sqlite33. .open Photos.sqliteACHANGE                                 ATRANSACTION                            ATRANSACTIONSTRING                      ZADDITIO...",
                "hasOriginal": true,
                "diggCount": 0,
                "commentCount": 0,
                "postTime": 1583552172000,
                "createTime": 1583552172000,
                "updateTime": 1583742739000,
                "url": "https://blog.csdn.net/aerror/article/details/104711872",
                "articleType": 1,
                "viewCount": 1106,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/104711872",
                "collectCount": 0,
                "rtype": "article"
            },
            {
                "type": "download",
                "formatTime": "2008.10.11",
                "title": "j2me手机游戏之俄罗斯方块",
                "description": "j2me开发的手机游戏,俄罗斯方块的完整源代码,包括编译脚本,需要安装Moto的Motorola J2ME(TM) SDK v5.4.2 for Linux OS Products",
                "fileType": "application/x-rar",
                "createTime": 1223734373000,
                "url": "https://download.csdn.net/download/aerror/682898",
                "rtype": "file"
            },
            {
                "type": "blog",
                "formatTime": "2019.12.25",
                "title": "libpng error: iTXt: chunk data is too large error: PNG unsigned integer out of range",
                "description": "使用png读某些png时，出现libpng error: iTXt: chunk data is too large error: PNG unsigned integer out of range这样的错误，发现是adobe 的XMP非常大引起的：$ xxd test.png00000000: 8950 4e47 0d0a 1a0a 0000 000d 4948 4452  .PNG.....",
                "hasOriginal": true,
                "diggCount": 0,
                "commentCount": 2,
                "postTime": 1576513953000,
                "createTime": 1576513953000,
                "updateTime": 1577289512000,
                "url": "https://blog.csdn.net/aerror/article/details/103572570",
                "articleType": 1,
                "viewCount": 5560,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/103572570",
                "collectCount": 0,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2019.12.11",
                "title": "如何在gdb里打印unicode 16(utf-16) C#的字符串",
                "description": "使用调用unity3d的il2cpp的时候，往往需要看看一下字符，但是这个c#的字符串是一个对象来的，并且是一个16bit的方式一个字符的unicode编码。x/hs addr效果如下：(gdb) x/hs 0x779f8e8c0x779f8e8c:\tu\"I am the unicode strings\"//断点Resources.Load之后，打印一下传入的文件的名字...",
                "hasOriginal": true,
                "diggCount": 0,
                "commentCount": 0,
                "postTime": 1576051535000,
                "createTime": 1576051535000,
                "updateTime": 1576052003000,
                "url": "https://blog.csdn.net/aerror/article/details/103494357",
                "articleType": 1,
                "viewCount": 560,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/103494357",
                "collectCount": 0,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2019.11.30",
                "title": "X99 E5-2696V4 macOS Catalina 10.15.1 内核补丁",
                "description": "//Kernel Patch 补丁//解决无法看到进度条，无法加载内核，或者启动的时候突然重启问题 FIND: 723CD077 500FB6C0 REPL:  6A3CD077 500FB6C0 // _xcpm_cpuid_set_info FIND:  C1E30848 63D389D0 48C1EA20 REPL: C1E308B8 00FF0000 31D29090 //_xc...",
                "hasOriginal": true,
                "diggCount": 0,
                "commentCount": 7,
                "postTime": 1575044349000,
                "createTime": 1575044349000,
                "updateTime": 1575122580000,
                "url": "https://blog.csdn.net/aerror/article/details/103319850",
                "articleType": 1,
                "viewCount": 2168,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/103319850",
                "collectCount": 0,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2019.11.27",
                "title": "以太坊代码流程分析",
                "description": "去年研究的时候画的图，初始化，合约的执行流程，cpu挖矿的流程挖矿的循环:",
                "hasOriginal": true,
                "diggCount": 0,
                "commentCount": 0,
                "postTime": 1574854685000,
                "createTime": 1574854685000,
                "updateTime": 1574855879000,
                "url": "https://blog.csdn.net/aerror/article/details/103281979",
                "articleType": 1,
                "viewCount": 154,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/103281979",
                "collectCount": 0,
                "rtype": "article"
            }
        ],
        "total": null
    }
}


{
    "code": 200,
    "message": "success",
    "traceId": "c6e80dfb-8829-498b-bc97-f5e557c46945",
    "data": {
        "list": [
            {
                "type": "blog",
                "formatTime": "2016.08.03",
                "title": "fbxsdk 的 JNI 库",
                "description": "fbxsdk 的 JNI 库",
                "hasOriginal": true,
                "diggCount": 0,
                "commentCount": 0,
                "postTime": 1470155294000,
                "createTime": 1470155294000,
                "updateTime": 1470155295000,
                "url": "https://blog.csdn.net/aerror/article/details/52099418",
                "articleType": 1,
                "viewCount": 1531,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/52099418",
                "collectCount": 0,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2015.11.28",
                "title": "ILSpy For MacOsX",
                "description": "ILSpy For MacOsX， 没有找到，只好自己动手改改了，需要的请到https://github.com/aerror2/ILSpy-For-MacOSX",
                "hasOriginal": true,
                "diggCount": 0,
                "commentCount": 0,
                "postTime": 1448707460000,
                "createTime": 1448707460000,
                "updateTime": 1448707460000,
                "url": "https://blog.csdn.net/aerror/article/details/50086125",
                "articleType": 1,
                "viewCount": 4991,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/50086125",
                "collectCount": 0,
                "rtype": "article"
            },
            {
                "type": "ask",
                "formatTime": "2015.01.27",
                "title": "一些变量，及代码的意思不懂，求助。。",
                "content": "<p>rtfm of x86 assembly. <br>\nah - ax hi byte<br>\nal  - ax low byte<br>\nax = low word of eax <br>\netc..</p>",
                "createTime": 1422303069000,
                "url": "https://ask.csdn.net/questions/163952/37388",
                "rtype": "answer"
            },
            {
                "type": "blog",
                "formatTime": "2014.05.29",
                "title": "破解Kaleidoscope-2.1.0-134，无限试用",
                "description": "找到超时时间计算的地方，有很多处，大概几十外，大约类似以下的代码，作者应该是copy了很多份重复的代码，               10000C592 F2 0F 10 8D 40 FE FF FF                 movsd   xmm1, [rbp+var_1C0]__text:000000010000C59A F2 0F 59 0D 46 B4 1C 00",
                "hasOriginal": true,
                "diggCount": 0,
                "commentCount": 0,
                "postTime": 1401297029000,
                "createTime": 1401297029000,
                "updateTime": 1401299188000,
                "url": "https://blog.csdn.net/aerror/article/details/27418759",
                "articleType": 1,
                "viewCount": 3398,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/27418759",
                "collectCount": 1,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2014.03.04",
                "title": "Mac os X  触摸板驱动程序开发。",
                "description": "mac os 触摸板驱动开发。",
                "hasOriginal": true,
                "diggCount": 1,
                "commentCount": 1,
                "postTime": 1393864182000,
                "createTime": 1393864182000,
                "updateTime": 1393865039000,
                "url": "https://blog.csdn.net/aerror/article/details/20410931",
                "articleType": 1,
                "viewCount": 3636,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/20410931",
                "collectCount": 0,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2013.05.03",
                "title": "wiresharp截包pdml文件分析php程序",
                "description": "<?phprequire_once 'XByteArray.php';require_once 'http.php';class MyPacket{\t\tpublic $port_src  = 0;\t\tpublic $ip_src    = 0;\t\tpublic $port_dst  = 0;\t\tpublic $ip_dst    = 0;\t\tpublic $tcp_flags",
                "hasOriginal": true,
                "diggCount": 0,
                "commentCount": 0,
                "postTime": 1367476538000,
                "createTime": 1367476538000,
                "updateTime": 1367567680000,
                "url": "https://blog.csdn.net/aerror/article/details/8875873",
                "articleType": 1,
                "viewCount": 4552,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/8875873",
                "collectCount": 0,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2013.05.02",
                "title": "使用twitter app原生接口登录(Native)",
                "description": "/**  * 这个方法来自反编译的结果, 包括调用的activity和返回的结果的key值, 官方开发没有提及，稳定性没有保证.  * 直接像facebook的sdk一样，跨进程调用twitter官方app的AuthorizeAppActivity,由app进行授权和进行x_auth_reverse得到access_token和token_secret.  *   * @retur",
                "hasOriginal": true,
                "diggCount": 0,
                "commentCount": 0,
                "postTime": 1367498651000,
                "createTime": 1367498651000,
                "updateTime": 1367498651000,
                "url": "https://blog.csdn.net/aerror/article/details/8877553",
                "articleType": 1,
                "viewCount": 6248,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/8877553",
                "collectCount": 0,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2012.12.18",
                "title": "一个for mac os x 的 usb无线驱动的开发流程",
                "description": "继承IOEthenetController start的时候拿到usbiointerface和其它设备上下文 enable的时候准备好资源，设置好回调，发送设备开始命令在收接设置的data的时候，进行解码转成IONetworkInterface认识的m_buf_t结构在outputpacket的时候，把m_buf转成设备认识的数据结构，通过设置支持的命令发给设置做好设备关闭，打开，重置的接口。做好",
                "hasOriginal": true,
                "diggCount": 0,
                "commentCount": 0,
                "postTime": 1355736065000,
                "createTime": 1355736065000,
                "updateTime": 1355801098000,
                "url": "https://blog.csdn.net/aerror/article/details/8308433",
                "articleType": 1,
                "viewCount": 10444,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/8308433",
                "collectCount": 2,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2012.12.17",
                "title": "php写的http协议",
                "description": "这个协议纯自已手工打造，超级灵活，如，我可以用它来分析wireshark的截包用法请看 test函数.  用到请保留作者信息。 <?php/** *  * @author aerror * */class HttpHeader{\tpublic $method;\tpublic $status_code;\tpublic $chunked;\tpublic $status_l",
                "hasOriginal": true,
                "diggCount": 0,
                "commentCount": 0,
                "postTime": 1355735125000,
                "createTime": 1355735125000,
                "updateTime": 1355735125000,
                "url": "https://blog.csdn.net/aerror/article/details/8308318",
                "articleType": 1,
                "viewCount": 9019,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/8308318",
                "collectCount": 0,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2012.12.06",
                "title": "天神降临，大家过来膜拜吧! FLASH AS 3.0 A星(A*, A star) 寻路算法--史上最快,极限优化挑战!",
                "description": "天神降临，大家过来膜拜吧! oh yeah!转载请声明出处，例子代码可以免费随意使用，但请保留或注明作者信息.  这里的算法说是终极优化, 我挑战了一下, http://eidiot.net/2007/04/17/a-star-pathfinding/最终结果比较他快三倍, 我站在高高处，藐视了 一下作者. 优化思路:             a.开包(open lis",
                "hasOriginal": true,
                "diggCount": 2,
                "commentCount": 5,
                "postTime": 1322549927000,
                "createTime": 1322549927000,
                "updateTime": 1354762029000,
                "url": "https://blog.csdn.net/aerror/article/details/7023406",
                "articleType": 1,
                "viewCount": 18931,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/7023406",
                "collectCount": 6,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2012.12.06",
                "title": "cocoa ios iphone  xcode 播放GIF动画",
                "description": "使用imageio的这个自带的framework, 这个库也是apple的webkit所使用的，可以参考apple的opensource的webkit实现。 因此，这个 库从性能和蒹容性方面应该都是最佳选择以下是代码，比较简单 NSDictionary *gifLoopCount = [NSDictionary dictionaryWithObjectsAndKeys:",
                "hasOriginal": true,
                "diggCount": 0,
                "commentCount": 0,
                "postTime": 1354760652000,
                "createTime": 1354760652000,
                "updateTime": 1354760652000,
                "url": "https://blog.csdn.net/aerror/article/details/8263754",
                "articleType": 1,
                "viewCount": 10270,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/8263754",
                "collectCount": 3,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2011.12.09",
                "title": "LZMA 算法 AS3 移植 实现",
                "description": "使用方法如下：源代码打包上传，欢迎下载使用. 源代码下载地址 http://download.csdn.net/detail/aerror/3898251         public static function decode(src:ByteArray) : ByteArray        {            if (src == null || src.",
                "hasOriginal": true,
                "diggCount": 0,
                "commentCount": 0,
                "postTime": 1323363155000,
                "createTime": 1323363155000,
                "updateTime": 1323410735000,
                "url": "https://blog.csdn.net/aerror/article/details/7055472",
                "articleType": 1,
                "viewCount": 11197,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/7055472",
                "collectCount": 0,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2011.12.02",
                "title": "libpng使用例子",
                "description": "本例使用libpng,将一系列单个的序列帧png文件合并成一个大的png, 去除无用的空白，计算每个系列的最小有效范围。请看源码吧，libpng用法有不明白的，可以参考一下，有抄到的到方请保留版权  //@author aerror //2011/12/02#include \"stdafx.h\"#include #include #include #incl",
                "hasOriginal": true,
                "diggCount": 0,
                "commentCount": 0,
                "postTime": 1322762209000,
                "createTime": 1322762209000,
                "updateTime": 1322762280000,
                "url": "https://blog.csdn.net/aerror/article/details/7032959",
                "articleType": 1,
                "viewCount": 14229,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/7032959",
                "collectCount": 2,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2011.12.02",
                "title": "排序组合，AS实现穷举算法",
                "description": "原理如图:  算法如下: private function compoud(N:uint, C:uint):void\t\t{\t\t\t\t\t\tvar pickIndex:int = 0;\t\t\tvar X:int=1;\t\t\tvar Y:int=1;\t\t\tvar P:int=1;\t\t\tvar i:int=0;\t\t\tvar arr:Array  = new",
                "hasOriginal": true,
                "diggCount": 0,
                "commentCount": 0,
                "postTime": 1322761391000,
                "createTime": 1322761391000,
                "updateTime": 1322761747000,
                "url": "https://blog.csdn.net/aerror/article/details/7032948",
                "articleType": 1,
                "viewCount": 9314,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/7032948",
                "collectCount": 0,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2011.11.29",
                "title": "sothink swf decompiler反编译的常见错误",
                "description": "1.  当bytecode 出现new activation或者 dup的时候，会出出现下面语句.  1.1        loc_1;             //通常是loc_1=this或者loc_1=0, local=x1.2        loc_1 = new ObjX();             new ObjectX().x = 0;",
                "hasOriginal": true,
                "diggCount": 0,
                "commentCount": 0,
                "postTime": 1322233785000,
                "createTime": 1322233785000,
                "updateTime": 1322548244000,
                "url": "https://blog.csdn.net/aerror/article/details/7013562",
                "articleType": 1,
                "viewCount": 14973,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/7013562",
                "collectCount": 0,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2010.09.21",
                "title": "AS3 XML 转JSON ",
                "description": "actionscript xml json 转换 ",
                "hasOriginal": true,
                "diggCount": 0,
                "commentCount": 0,
                "postTime": 1284999000000,
                "createTime": 1284999000000,
                "updateTime": 1284999000000,
                "url": "https://blog.csdn.net/aerror/article/details/5898265",
                "articleType": 1,
                "viewCount": 12188,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/5898265",
                "collectCount": 0,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2010.09.14",
                "title": "编写configure.ac/in文件加入mysql 的include和libs的路径自动检测或由用户指定.",
                "description": "<br />mysql不同linux下的安装路径不大相同，直接中包括，不同的版本下编译比较麻烦,装mysql也N种方法，还有x86和x64版本同时装的，搞得很混乱，参考了一下别人的检测做法,目前发现两种:<br /> <br />1. 装了mysql开发库之后（你Yum,build from source, emerge 等等），会顺便安装一个mysql_config的程序，它可以输出mysql的include和libs路径,  使用am工具可以在configure.ac写以下脚本，让用户自行给一个mysq",
                "hasOriginal": true,
                "diggCount": 0,
                "commentCount": 0,
                "postTime": 1284405120000,
                "createTime": 1284405120000,
                "updateTime": 1284405120000,
                "url": "https://blog.csdn.net/aerror/article/details/5882385",
                "articleType": 1,
                "viewCount": 12524,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/5882385",
                "collectCount": 0,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2010.09.14",
                "title": "LINUX 下的内存检测工具, 性能测试工具",
                "description": "1.    valgrind ，使用例子,根据还有其它功能很强大，发掘中. . valgrind --tool=memcheck --leak-check=yes ./ProxyServer  检测内存泄漏    valgrind --tool=memcheck --leak-check=full --show-reachable=yes2.     gprof 使用方式:   在编译的时候要加上 -pg -g 的CFLAGS和CPPFLAGS.   然后运行，在当前目录, 生成记录文件，缺省叫gmon,使",
                "hasOriginal": true,
                "diggCount": 0,
                "commentCount": 0,
                "postTime": 1284404580000,
                "createTime": 1284404580000,
                "updateTime": 1284404640000,
                "url": "https://blog.csdn.net/aerror/article/details/5882383",
                "articleType": 1,
                "viewCount": 10405,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/5882383",
                "collectCount": 0,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2010.09.14",
                "title": "GDB 使用笔记",
                "description": "近来在搞LINUX, GDB边学边用，感觉这个工具比较不上ollydbg和windbg, 还算够用。做了一些笔记，防止忘了，命令行的东东比较容易忘一些.  1.ptype 打印类型结构信息  2.info register 打印寄存器信息  3. x/nfu addr   x addr   x Use the x command to examine memory.   n, f, and u are all optional parameters that specify how much memory ",
                "hasOriginal": true,
                "diggCount": 0,
                "commentCount": 0,
                "postTime": 1284404160000,
                "createTime": 1284404160000,
                "updateTime": 1284404220000,
                "url": "https://blog.csdn.net/aerror/article/details/5882379",
                "articleType": 1,
                "viewCount": 8686,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/5882379",
                "collectCount": 1,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2009.09.22",
                "title": "LINUX SOCKET AIO 问题--感觉LINUX超级垃圾，无比失望ing",
                "description": "写了代码，使用ace_proactor, 原来windows跑得非常漂亮，来到linux就时不时不工作，然后加asynce_connector后，发现完成不能工作，async_stream_write后，发现卡在那里，根本发不出去，多次分析后，发现，原来之前有aio_read没有完成，aio_write的请求就block那里了，write这个操作竟然一定要等前的aio_read完成之后，才可以执行",
                "hasOriginal": true,
                "diggCount": 0,
                "commentCount": 0,
                "postTime": 1253553360000,
                "createTime": 1253553360000,
                "updateTime": 1253554740000,
                "url": "https://blog.csdn.net/aerror/article/details/4578331",
                "articleType": 1,
                "viewCount": 12877,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/4578331",
                "collectCount": 0,
                "rtype": "article"
            }
        ],
        "total": null
    }
}


{
    "code": 200,
    "message": "success",
    "traceId": "98fad5f5-8205-49e9-bb03-0abff5414c3f",
    "data": {
        "list": [
            {
                "type": "blog",
                "formatTime": "2009.08.29",
                "title": "强大的 GNU AUTO MAKE工具集 ",
                "description": " 一．功能简述快速方便帮助你生成在众多LINUX，BSD和UNIX下可移植的Makefile.in和configure脚本。完整文档参考:http://sources.redhat.com/automake/automake.html 二．工具集成员以使用的执行顺序为作生后顺序. 1.autoscan扫描的代码目录，自动把所有的库调用函数抽取出来生成检查的M4宏",
                "hasOriginal": true,
                "diggCount": 0,
                "commentCount": 0,
                "postTime": 1237552320000,
                "createTime": 1237552320000,
                "updateTime": 1251479940000,
                "url": "https://blog.csdn.net/aerror/article/details/4009110",
                "articleType": 1,
                "viewCount": 8578,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/4009110",
                "collectCount": 0,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2009.01.28",
                "title": "使用photoshop 修复旧照片",
                "description": "亲戚的老照片拿出来，只剩唯一一张了，想翻晒几份，好花，于是使用数码相机拍了下来，看着放假有空帮她修复一下.主要使用的工具是:1.印章工具2.修复画笔3.杂色，去除杂色4.复制粘贴5.橡皮擦一共修复了十几个小时，大部分的时间都是在使用印章工具，修复画笔修复的效果对于这么花的照片根本不起作用，很多细节根本看看不清了，只能使用补画的方式进行修复.确实是很细的活，花费很多的",
                "hasOriginal": true,
                "diggCount": 0,
                "commentCount": 1,
                "postTime": 1233140820000,
                "createTime": 1233140820000,
                "updateTime": 1233148980000,
                "url": "https://blog.csdn.net/aerror/article/details/3854113",
                "articleType": 1,
                "viewCount": 9776,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/3854113",
                "collectCount": 1,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2009.01.01",
                "title": "回顾 WINDOWS98 NEST V8086模式和中断服务调用",
                "description": "新的一年到了,不禁回头望了一下，写些老掉牙的东西以作纪念。早在2004年,我当时正在写个wdm的驱动程序，因为软件的版本允许在windows 98, windows NT 4.0 , windows 2000和windows XP上运行，我不想每个写了一个wdm后，再实现一个相同功能的Vxd，在当时我的想法里，这是不利行维护，是不明智的行为，于是我决定让我的WDM程序可以在上面所说的所有win",
                "hasOriginal": true,
                "diggCount": 0,
                "commentCount": 0,
                "postTime": 1230654600000,
                "createTime": 1230654600000,
                "updateTime": 1230747000000,
                "url": "https://blog.csdn.net/aerror/article/details/3659164",
                "articleType": 1,
                "viewCount": 9000,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/3659164",
                "collectCount": 0,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2008.11.17",
                "title": "关于windows xp sp2和windows 2003 sp1的最大连接数限制分析",
                "description": "这个限制也是在tcpip.sys中限制的,windows xp sp2的版本代码如下,留意红色的代码:INIT:0005F660                         ; __stdcall InitTCPConn()INIT:0005F660                         _InitTCPConn@0  proc near               ; CO",
                "hasOriginal": true,
                "diggCount": 0,
                "commentCount": 0,
                "postTime": 1211382780000,
                "createTime": 1211382780000,
                "updateTime": 1226936160000,
                "url": "https://blog.csdn.net/aerror/article/details/2467781",
                "articleType": 1,
                "viewCount": 2044,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/2467781",
                "collectCount": 0,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2008.10.28",
                "title": "j2me手机游戏开发之俄罗斯方块--附完整源代码",
                "description": " 原理比较简单的,就是一个基于Frame的游戏,主游戏画面设计如下: //FIELD: 22X17                      // ////////////////////////////////////// //1                                          1         0 // //2                    ",
                "hasOriginal": true,
                "diggCount": 1,
                "commentCount": 2,
                "postTime": 1223907300000,
                "createTime": 1223907300000,
                "updateTime": 1225196820000,
                "url": "https://blog.csdn.net/aerror/article/details/3071579",
                "articleType": 1,
                "viewCount": 7656,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/3071579",
                "collectCount": 2,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2008.10.28",
                "title": "公布之前关于C#写的SNIFFER的全部源代码",
                "description": " 你可以自由使用它,如果你将它用于商业用途,最好请来信告示知一下,请保留版权有关的信息. 下载地址http://download.csdn.net/source/643241",
                "hasOriginal": true,
                "diggCount": 0,
                "commentCount": 0,
                "postTime": 1225196460000,
                "createTime": 1225196460000,
                "updateTime": 1225196580000,
                "url": "https://blog.csdn.net/aerror/article/details/3169209",
                "articleType": 1,
                "viewCount": 6181,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/3169209",
                "collectCount": 0,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2008.10.07",
                "title": "手机E680同时播放两个音乐完美解决方案-真!",
                "description": "国庆这几天把我之前C#写的俄罗斯方块移植到了我的E680上,使用的是Moto的J2me开发包,在声音的播放方面遇到了不少奇奇怪怪的问题：1.声音时有时无，有时长时间没有问题，突然没有了声音,再也不出声了.2.延时时长时短.3.第三个Player无法出声.找了一下网上，发现这些都是手机的通病和老大难，而且每个厂家的实现都不一样，解决方案也不同。发现有人在blog上说:根据MO",
                "hasOriginal": true,
                "diggCount": 0,
                "commentCount": 0,
                "postTime": 1223313060000,
                "createTime": 1223313060000,
                "updateTime": 1223365140000,
                "url": "https://blog.csdn.net/aerror/article/details/3024714",
                "articleType": 1,
                "viewCount": 3764,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/3024714",
                "collectCount": 0,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2008.09.22",
                "title": "Windows串口调试通信协议KDCOM.DLL的反向分析及Asm和C源代码",
                "description": "前段时间突然兴趣大发,把KDCOM.DLL用IDA进行了分析和阅读,并导出成asm文件，作了修改和编译使之可以编译后替换原先的kdcom.dll正常工作, 这之间最难的莫过于kdcom.dll无法进行调试和跟踪的问题了, 手段非常有限, 我暂时只知道使用一下Vmware的后门I/O port进行一些检测性的LOG,以致使由反向代码编译出的kdom.dll最终能正常工作花费了我极多的时间.事实上",
                "hasOriginal": true,
                "diggCount": 0,
                "commentCount": 2,
                "postTime": 1222002480000,
                "createTime": 1222002480000,
                "updateTime": 1222075140000,
                "url": "https://blog.csdn.net/aerror/article/details/2958588",
                "articleType": 1,
                "viewCount": 7499,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/2958588",
                "collectCount": 1,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2008.09.21",
                "title": "FLEX ActionScript 游戏开发教程之[贪吃蛇]Step By Step",
                "description": " 我也是刚刚接触到Flex的游戏开发, 继j2me的手机游戏开发后,再现学现卖,发一个Flash版的贪吃蛇游戏开发的Step by Step教程,希望对新手有些帮助. :). Step 1.下载J2SE和Flex 3.1 SDK(http://download.macromedia.com/pub/flex/sdk/flex_sdk_3.zip,免费的,哈哈)，安装好Java，解压",
                "hasOriginal": true,
                "diggCount": 0,
                "commentCount": 11,
                "postTime": 1222000920000,
                "createTime": 1222000920000,
                "updateTime": 1222002180000,
                "url": "https://blog.csdn.net/aerror/article/details/2958514",
                "articleType": 1,
                "viewCount": 5473,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/2958514",
                "collectCount": 3,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2008.09.21",
                "title": "J2ME手机游戏贪吃蛇开发Step By Step",
                "description": "呵呵，昨天晚上开始学习手机游戏编写，现在现学现卖，希望可以帮到一些初手.:). Step1.安装J2se SDK, j2sdk-1_4_2_08-windows-i586-p.exe/到C:/j2sdk1.4.2_08目录 Step2.我的电脑->属性->高级->环境变量,设置PATH路径加上: C:/j2sdk1.4.2_08/bin; Step3.安装Motorola J2ME SDK f",
                "hasOriginal": true,
                "diggCount": 0,
                "commentCount": 0,
                "postTime": 1221988500000,
                "createTime": 1221988500000,
                "updateTime": 1221999660000,
                "url": "https://blog.csdn.net/aerror/article/details/2958019",
                "articleType": 1,
                "viewCount": 2309,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/2958019",
                "collectCount": 0,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2008.06.02",
                "title": "基于C#的网络SNIFFER网络IP层监听程序",
                "description": "提供的功能:1.监听指定的网络接口的基于IP的网络包,如TCP,UDP,ICMP等2.基本C#的脚本自定义数据包解析器, 动态编辑，加载, 保存，编译和管理C#解析器代码。对于一些简单的协议直接可以使用自定义的解析器进行分析和处理.3.可方便的编辑，加载，保存,使用和管理协议过滤器.下载地址http://download.csdn.net/source/476261  ",
                "hasOriginal": true,
                "diggCount": 0,
                "commentCount": 0,
                "postTime": 1212207720000,
                "createTime": 1212207720000,
                "updateTime": 1212371520000,
                "url": "https://blog.csdn.net/aerror/article/details/2498571",
                "articleType": 1,
                "viewCount": 2035,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/2498571",
                "collectCount": 0,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2008.05.24",
                "title": "关于windows xp sp2/sp3 中tcpip.sys对于Raw socket的限制",
                "description": "WINDOWS XP SP2修改了TCPIP.SYS,增加了对于RAW SOCKET的发送和伪造源地的限制，详情如下 :1) 不能通过raw socket发送TCP报文。做此尝试时会得到10004号错误。2) 不能通过raw socket发送伪造源IP的UDP报文。3) 不能通过raw socket发送IP碎片。做此尝试时会得到10004号错误。不知微软在哪次对2000 SP4的修补中实现了类",
                "hasOriginal": true,
                "diggCount": 0,
                "commentCount": 1,
                "postTime": 1211382480000,
                "createTime": 1211382480000,
                "updateTime": 1211613480000,
                "url": "https://blog.csdn.net/aerror/article/details/2467775",
                "articleType": 1,
                "viewCount": 5831,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/2467775",
                "collectCount": 6,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2008.05.21",
                "title": "raw socket 编程",
                "description": "Microsoft TCP/IP 组件包含“核心协议”、“服务”及两者之间的“接口”。传输驱动程序接口 (TDI) 与网络设备接口规范 (NDIS) 是公用的。 此外，还有许多用户模型应用程序的更高级接口。最常用的接口是 Windows Sockets、远程过程调用 (RPC) 和 NetBIOS。 Windows Sockets 是一个编程接口，它是在加州大学伯克利分校开发的套接字接口的基础",
                "hasOriginal": false,
                "diggCount": 0,
                "commentCount": 0,
                "postTime": 1211380800000,
                "createTime": 1211380800000,
                "updateTime": 1211380800000,
                "url": "https://blog.csdn.net/aerror/article/details/2467715",
                "articleType": 2,
                "viewCount": 1334,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/2467715",
                "collectCount": 2,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2008.05.08",
                "title": "关于 AspNetDB.mdf",
                "description": "关于 AspNetDB.mdf由于没有aspnetdb.mdf数据库，因此得先建立一个，这个可以通过aspnet_regsql.exe完成，该程序位于C:/WINDOWS/Microsoft.NET/Framework/v2.0.50727/下。 1、运行它之后会弹出的窗口：按\"Next >\"按钮 2、我们会发现除了有配置数据库外，还有删除数据库的功能，以后说不定可以派上用场，现在自然选Con",
                "hasOriginal": false,
                "diggCount": 0,
                "commentCount": 1,
                "postTime": 1210191540000,
                "createTime": 1210191540000,
                "updateTime": 1210191540000,
                "url": "https://blog.csdn.net/aerror/article/details/2413774",
                "articleType": 2,
                "viewCount": 3636,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/2413774",
                "collectCount": 0,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2008.05.06",
                "title": "混合（本机和托管）程序集",
                "description": " 混合程序集能够同时包含非托管计算机指令和 MSIL 指令。这使它们可以调用 .NET 组件或被其调用，同时保留与完全非托管组件的兼容性。使用混合程序集，开发人员可以混合使用托管和非托管功能创作应用程序。这使得混合程序集成为将现有 Visual C++ 应用程序迁移到 .NET 平台的理想选择。例如，通过使用 /clr 编译器开关仅重新编译一个模块，就可将完全由非托管函数组成的现有应用程序",
                "hasOriginal": true,
                "diggCount": 0,
                "commentCount": 0,
                "postTime": 1210087140000,
                "createTime": 1210087140000,
                "updateTime": 1210087140000,
                "url": "https://blog.csdn.net/aerror/article/details/2404742",
                "articleType": 1,
                "viewCount": 835,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/2404742",
                "collectCount": 0,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2008.05.06",
                "title": "使用非托管C++访问WEBSERVICE",
                "description": "使用WebServices methods using sproxy.exe provided by Visual Studio 2003 来生成代理. Visual Studio 2005同样带有sproxy.exe 这个工具。但是Visual Studio 2008就没有了. 原因应该是样的:ATL Server: Visual C++ shared source softwareOv",
                "hasOriginal": true,
                "diggCount": 0,
                "commentCount": 0,
                "postTime": 1210016640000,
                "createTime": 1210016640000,
                "updateTime": 1210019400000,
                "url": "https://blog.csdn.net/aerror/article/details/2397526",
                "articleType": 1,
                "viewCount": 4056,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/2397526",
                "collectCount": 1,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2007.08.19",
                "title": "如何在windows vista64bit使用遗留的32bit的模块",
                "description": "如果你的32bit模块是可执行文件，恭喜,  wow64可以完全运行你的程序。如果你的32bit模块是有源代码的，没有嵌入的x86也恭喜，你设置到64bit的编译环境编译到64bit就可以了，一只需要少少修改.如果你没有源代码，只有编译好了的dll,那就麻烦了，文档和实践都说明：1. 64bit的进程不能加载32bit的dll2.32bit的进程不能加载64bit的dll.我对",
                "hasOriginal": true,
                "diggCount": 0,
                "commentCount": 0,
                "postTime": 1187506380000,
                "createTime": 1187506380000,
                "updateTime": 1187508900000,
                "url": "https://blog.csdn.net/aerror/article/details/1750446",
                "articleType": 1,
                "viewCount": 930,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/1750446",
                "collectCount": 0,
                "rtype": "article"
            },
            {
                "type": "blog",
                "formatTime": "2007.08.19",
                "title": "关于打印机驱动程序32bit to 64bit移植的一些总结",
                "description": "1.打印驱动可有user mode 或kernel mode两种模式,当然或者混合.2.kernel mode请指定为生成的类型是gid driver.3.user mode以实现约定函数的两个DLL提供，一个提供ddi, 另一个提供统一的用户配置界面.4.安装dll的inf和其它的inf有些不一样，请用infgate.exe进行检测,infchk.exe会提示你这样做.    d",
                "hasOriginal": true,
                "diggCount": 0,
                "commentCount": 0,
                "postTime": 1187508120000,
                "createTime": 1187508120000,
                "updateTime": 1187508360000,
                "url": "https://blog.csdn.net/aerror/article/details/1750479",
                "articleType": 1,
                "viewCount": 1810,
                "picList": [],
                "editUrl": "https://mp.csdn.net/console/editor/html/1750479",
                "collectCount": 1,
                "rtype": "article"
            }
        ],
        "total": null
    }
}
